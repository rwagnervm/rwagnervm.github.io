import{e4 as S,e5 as I,cM as w,eX as f,eU as u,fD as O,U as g,cz as T,ek as $,iX as P,s as b,G as E,aa as o,ab as s,f9 as v,ed as L,dY as M,ac as F,dX as R,dJ as J}from"./index.7eb0daf2.js";import{S as N}from"./MultiOriginJSONSupport.b5976a45.js";import{i as U}from"./scaleUtils.24a7f96d.js";import{i as _}from"./APIKeyMixin.a389fc6d.js";import{m as j,f as q,t as A}from"./SublayersOwner.113c878d.js";import{l as k}from"./ArcGISService.c7559039.js";import{e as V}from"./CustomParametersMixin.b4d39f07.js";import{b as z}from"./OperationalLayer.33897364.js";import{j as D}from"./PortalLayer.5cf51695.js";import{f as G}from"./RefreshableLayer.908b9ff1.js";import{l as Z}from"./TemporalLayer.859e579f.js";import{p as B}from"./commonProperties.a37169f8.js";import{y as C}from"./ExportImageParameters.03bba3ea.js";import{t as H}from"./imageBitmapUtils.630b294f.js";import{e as x}from"./sublayerUtils.9912a6d8.js";import{t as K}from"./versionUtils.9e2a095a.js";import"./Version.856e86b2.js";import"./portalItemUtils.761d02ba.js";import"./UniqueValueRenderer.8069ab57.js";import"./ColorStop.aa8650af.js";import"./diffUtils.080c04bc.js";import"./colorRamps.272b71a1.js";import"./sizeVariableUtils.34255976.js";import"./visualVariableUtils.12ee1cdb.js";import"./jsonUtils.185b82ae.js";import"./defaults.e5a1167a.js";import"./defaultsJSON.ba72df2f.js";import"./styleUtils.7f2b22b0.js";import"./jsonUtils.93554317.js";import"./LRUCache.6f8863ed.js";import"./FieldsIndex.333d0734.js";import"./UnknownTimeZone.4756be49.js";import"./OverrideHelper.b5d99b26.js";import"./colorUtils.085072a2.js";import"./vec42.faaf2b1c.js";import"./vec4f64.7b667e97.js";import"./utils.dbb84a38.js";import"./quantizationUtils.fe6b1e6e.js";import"./heatmapUtils.b763e953.js";import"./QueryTask.20e8c8fd.js";import"./infoFor3D.8ecd2df8.js";import"./executeForIds.dd0800ec.js";import"./query.702fc5fe.js";import"./pbfQueryUtils.52d7ad7f.js";import"./pbf.72af564e.js";import"./OptimizedFeature.32c00f5f.js";import"./OptimizedFeatureSet.6fd3bcb1.js";import"./queryZScale.835a340e.js";import"./executeQueryJSON.b781982b.js";import"./FeatureSet.78257171.js";import"./executeQueryPBF.76577f66.js";import"./featureConversionUtils.c6dfa488.js";import"./featureLayerUtils.1828d741.js";import"./RelationshipQuery.a9d69ee6.js";import"./FeatureType.f4c0cb30.js";import"./FeatureTemplate.7907b31e.js";import"./labelingInfo.41bbc735.js";import"./labelUtils.37b9d8d8.js";import"./LayerFloorInfo.164b006f.js";import"./Relationship.ee67ec43.js";import"./serviceCapabilitiesUtils.21de2819.js";import"./popupUtils.f17e95f0.js";import"./TimeInfo.d882fe8e.js";import"./floorFilterUtils.1e9a5f1e.js";let t=class extends S(Z(I(j(q(k(z(D(N(G(_(V(J)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new C({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(w).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,a){if(!this.loaded||!e)return;const m=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=f(a.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===u.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=x(m,i,u.SERVICE)}else if(l>u.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=x(m,i.sublayers,f(i.origin))}}const h=[],c={writeSublayerStructure:p,...a};let d=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const y=i.write({},c);h.push(y),d=d||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(r.layers=h),d&&(r.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,r,n,a){const m=a?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=a?.floors??null,this._exportImageParameters.scale=U({extent:e,width:r})*m;const p=this._exportImageParameters.toJSON(),l=!a?.rotation||this.version<10.3?{}:{rotation:-a.rotation},h=e?.spatialReference,c=O(h);p.dpi*=m;const d={};if(a?.timeExtent){const{start:i,end:y}=a.timeExtent.toJSON();d.time=i&&y&&i===y?""+i:`${i??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:c,imageSR:c,size:r+","+n,...p,...l,...d}}async fetchImage(e,r,n,a){const{data:m}=await this._fetchImage("image",e,r,n,a);return m}async fetchImageBitmap(e,r,n,a){const{data:m,url:p}=await this._fetchImage("blob",e,r,n,a);return H(m,p,a?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,r),{extent:a,fullExtent:m,timeExtent:p}=n,l=a||m;return{fullExtent:l&&T.fromJSON(l),timeExtent:p&&$.fromJSON({start:p[0],end:p[1]})}}loadAll(){return P(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return K(this,e)}async _fetchImage(e,r,n,a,m){const p={responseType:e,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,a,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await g(l,p);return{data:h,url:l}}catch(h){throw E(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};o([s(v("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),o([s({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),o([s()],t.prototype,"dpi",void 0),o([s()],t.prototype,"gdbVersion",void 0),o([s()],t.prototype,"imageFormat",void 0),o([L("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),o([s({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),o([s({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),o([s()],t.prototype,"imageTransparency",void 0),o([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),o([s({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),o([s({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),o([s({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),o([s(v("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),o([s()],t.prototype,"sourceJSON",void 0),o([s({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),o([M("sublayers",{layers:{type:[A]},visibleLayers:{type:[R]}})],t.prototype,"writeSublayers",null),o([s({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),o([s({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),o([s(B)],t.prototype,"url",void 0),t=o([F("esri.layers.MapImageLayer")],t);const st=t;export{st as default};
