import{e0 as It,_ as bt,g4 as te,ff as lt,n as ae,s as O,fQ as Je,aj as A,cz as L,U as ct,iY as Rt,bz as H,D as vt,aa as I,ab as R,ac as K,dW as St,$ as Ae,aS as Ve,bK as Tt,ed as _t,dK as Ft,aH as Mt,bS as kt,jl as Ct,dl as ut,jm as Ot,aK as Pe,d as Pt,E as $t,aO as Dt,cI as Nt,e4 as Et,e5 as Bt,dw as Jt,dx as At,cM as Lt,ei as ue,a4 as Ht,dX as zt,eG as Wt,ef as Gt,dJ as jt}from"./index.7eb0daf2.js";import{S as Ut}from"./MultiOriginJSONSupport.b5976a45.js";import{l as qt}from"./ArcGISService.c7559039.js";import{e as Vt}from"./CustomParametersMixin.b4d39f07.js";import{c as Yt,N as $e,l as Xt,d as Kt,b as Qt,h as Zt,$ as Ye,W as Xe,q as ei,U as ti,E as ii,L as Ke,t as si,e as ni,f as ri,a as ai}from"./fetchRasterInfo.f606e844.js";import{p as ht,y as oi}from"./commonProperties.a37169f8.js";import{h as ft,D as mt,i as li,a as ci,p as Le,d as Qe,o as ui,f as Ze,g as hi}from"./multidimensionalUtils.4eed3513.js";import{j as fi,k as Re,m as He,L as mi,a as ve,h as pi,D as ze,P as di,E as yi,F as et,H as gi,U as xi,N as wi,I as de,J as Ii,K as bi,O as Ri,R as vi}from"./RasterSymbolizer.f97d5f6c.js";import{i as tt,m as it,x as st,h as Si,s as Ti}from"./RawBlockCache.74b3fa1f.js";import{b as Te,D as pt,R as _i,u as Fi,A as Mi,l as ki,a as q,f as Ci,s as Oi,p as Pi,E as $i,W as Di,T as Ni}from"./dataUtils.a1eaa611.js";import{T as De,D as ye,j as nt,r as rt,o as Ei,V as _e,J as Ie,e as Bi,Z as Ji,C as Ai,U as Ne}from"./rasterProjectionHelper.dd8d9a43.js";import{d as We}from"./FeatureSet.78257171.js";import{S as dt,y as Ge,c as Li,R as Hi}from"./PolynomialTransform.ec68af67.js";import{b as zi}from"./OperationalLayer.33897364.js";import{j as Wi}from"./PortalLayer.5cf51695.js";import{f as Gi}from"./RefreshableLayer.908b9ff1.js";import{l as ji}from"./TemporalLayer.859e579f.js";import{j as Ui}from"./TilemapCache.a367d9db.js";import{p as qi}from"./popupUtils.f17e95f0.js";import{A as ge}from"./interfaces.c34ab3ac.js";import"./UniqueValueRenderer.8069ab57.js";import"./ColorStop.aa8650af.js";import"./diffUtils.080c04bc.js";import"./colorRamps.272b71a1.js";import"./sizeVariableUtils.34255976.js";import"./visualVariableUtils.12ee1cdb.js";import"./jsonUtils.185b82ae.js";import"./defaults.e5a1167a.js";import"./defaultsJSON.ba72df2f.js";import"./styleUtils.7f2b22b0.js";import"./utils.e5165ddb.js";import"./utils.dbb84a38.js";import"./LRUCache.6f8863ed.js";import"./ClassBreaksDefinition.427c0bbe.js";import"./colorUtils.085072a2.js";import"./vec42.faaf2b1c.js";import"./vec4f64.7b667e97.js";import"./portalItemUtils.761d02ba.js";import"./TimeInfo.d882fe8e.js";import"./ByteSizeUnit.e7dc4350.js";const at=8,Vi=256;let Yi=0,J=class extends It(St){constructor(){super(...arguments),this._tileFetchQueue=new bt({concurrency:32,process:(t,e)=>this._fetchRawTile(t.pyramidLevel,t.row,t.col,{...t.options,signal:e})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const t=De();this.addResolvingPromise(t),await this.when()}normalizeCtorArgs(t){return t?.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:te.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=ye(t.spatialReference);return e!=null&&t.extent.width>=e/2}get _hasNoneOrGCSShiftTransform(){const{transform:t}=this.rasterInfo;return t==null||t.type==="gcs-shift"}set rasterJobHandler(t){this._set("rasterJobHandler",t),this.datasetFormat==="Function"&&this.primaryRasters?.rasters?.forEach(e=>e.rasterJobHandler=t)}get rasterId(){return this.url||"rasterId-"+Yi++}set url(t){this._set("url",lt(t,ae.getLogger(this)))}async open(t){throw new O("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,s,i={}){const n=i.tileInfo||this.rasterInfo.storageInfo.tileInfo,a=this.getTileExtentFromTileInfo(t,e,s,n);return i={noClip:!0,...i},this.fetchPixels(a,n.size[0],n.size[1],i)}async identify(t,e={}){t=Je(A,t).clone().normalize();const{multidimensionalDefinition:s,timeExtent:i}=e,{rasterInfo:n}=this,{hasMultidimensionalTranspose:a,multidimensionalInfo:r}=n;let{transposedVariableName:o}=e;const l=r!=null&&a&&(i!=null||ft(s));l&&!o&&(o=s!=null&&s.length>0?s[0].variableName??void 0:r.variables[0].name,e={...e,transposedVariableName:o}),e=this._getRequestOptionsWithSliceId(e);const{spatialReference:c,extent:u}=n,{datumTransformation:f}=e;let h=nt(t,c,f);if(!u.intersects(h))return{location:h,value:null};if(n.transform!=null){const F=n.transform.inverseTransform(h);if(!n.nativeExtent.intersects(F))return{location:F,value:null};h=F}let m=0;const y=o!=null&&r!=null&&n.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const F=this.primaryRasters.rasters[0];if(y)return F.identify(h,e);const{pixelSize:P}=n,C=3,$=P.x*C/2,D=P.y*C/2,N=new L({xmin:h.x-$,xmax:h.x+$,ymin:h.y-D,ymax:h.y+D,spatialReference:c}),B={interpolation:"nearest",multidimensionalDefinition:s,sliceId:e.sliceId},{pixelBlock:V}=await F.fetchPixels(N,C,C,B),{pixelBlock:W}=await this.fetchPixels(N,C,C,B);if(V==null)return{location:h,value:null};const G=Math.floor(C*C*.5),Q=!V.mask||V.mask[G]?V.pixels.map(U=>U[G]):null;let ie;return W!=null&&(ie=!W.mask||W.mask[G]?W.pixels.map(U=>U[G]):void 0),{location:h,value:Q,processedValue:ie,pyramidLevel:0}}if(!y){if(e.srcResolution)m=rt(e.srcResolution,n,this.ioConfig.sampling).pyramidLevel;else if(m=await this.computeBestPyramidLevelForLocation(t,e),m==null)return{location:h,value:null}}const g=this.identifyPixelLocation(h,m,null,y);if(g===null)return{location:h,value:null};const{row:p,col:d,rowOffset:x,colOffset:w,blockWidth:b}=g,T=o??e.sliceId,v=tt(this.rasterId,T),S=`${m}/${p}/${d}`;let M=it(v,null,S);M==null&&(M=this.fetchRawTile(m,p,d,e),st(v,null,S,M));const _=await M;if(!_?.pixels?.length)return{location:h,value:null};const k=x*b+w;return this._processIdentifyResult(_,{srcLocation:h,position:k,pyramidLevel:m,useTransposedTile:!!y,requestSomeSlices:l,identifyOptions:e})}async fetchPixels(t,e,s,i={}){t=Ei(t),i=this._getRequestOptionsWithSliceId(i);const{_hasNoneOrGCSShiftTransform:n}=this;if(i.requestRawData&&n)return this._fetchPixels(t,e,s,i);const a=ye(t.spatialReference),r=_e(t);if(a==null||r===0||r===1&&this._isGlobalWrappableSource&&n)return this._fetchPixels(t,e,s,i);if(r>=3)return{extent:t,pixelBlock:null};const o=[],{xmin:l,xmax:c}=t,u=Math.round(a/(c-l)*e),f=u-Math.round((a/2-l)/(c-l)*e);let h=0;const m=[];for(let d=0;d<=r;d++){const x=new L({xmin:d===0?l:-a/2,xmax:d===r?c-a*d:a/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),w=d===0?u-f:d===r?e-h:u;h+=w,m.push(w);const b=i.disableWrapAround&&d>0?null:this._fetchPixels(x,w,s,i);o.push(b)}const y=(await Promise.all(o)).map(d=>d?.pixelBlock);let g=null;const p={width:e,height:s};return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:y,srcMosaicSize:p,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:m},i)).pixelBlock:g=Te(y,p,{blockWidths:m}),{extent:t,srcExtent:Ie(t,this.rasterInfo.spatialReference,i.datumTransformation),pixelBlock:g}}async fetchRawPixels(t,e,s,i={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const n=await this._fetchRawTiles(t,e,s,i),{nativeExtent:a,nativePixelSize:r,storageInfo:o}=this.rasterInfo,l=2**t,c=r.x*l,u=r.y*l,f=new L({xmin:a.xmin+c*e.x,xmax:a.xmin+c*(e.x+s.width-1),ymin:a.ymax-u*(e.y+s.height-1),ymax:a.ymax-u*e.y,spatialReference:a.spatialReference});if(!n)return{extent:f,srcExtent:f,pixelBlock:null};const{pixelBlocks:h,mosaicSize:m}=n;if(h.length===1&&h[0]!=null&&h[0].width===s.width&&h[0].height===s.height)return{extent:f,srcExtent:f,pixelBlock:n.pixelBlocks[0]};const y=t>0?o.pyramidBlockWidth:o.blockWidth,g=t>0?o.pyramidBlockHeight:o.blockHeight,p={x:e.x%y,y:e.y%g};let d;return this.rasterJobHandler?d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:m,destDimension:s,clipOffset:p,clipSize:s,coefs:null,sampleSpacing:null,interpolation:i.interpolation,alignmentInfo:null,blockWidths:null},i)).pixelBlock:d=Te(h,m,{clipOffset:p,clipSize:s}),{extent:f,srcExtent:f,pixelBlock:d}}fetchRawTile(t,e,s,i){throw new O("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return Ie(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?fi(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,s=0){const{customFetchParameters:i}=this.ioConfig,{range:n,query:a,headers:r}=e;s=s??e.retryCount??this.ioConfig.retryCount;const o=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await ct(t,{...e,query:{...a,...i},headers:{...r,...o}})}catch(l){if(s>0)return s--,this.request(t,e,s);throw l}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return e==null||t==null||t.length===0?null:mt(t,e)}getTileExtentFromTileInfo(t,e,s,i){const n=i.lodAt(t);return this.getTileExtent({x:n.resolution,y:n.resolution},e,s,i.origin,i.spatialReference,i.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:s,pixelSize:i}=this.rasterInfo,{pyramidResolutions:n}=t;if(!t.tileInfo){const a=[],r=t.maximumPyramidLevel||0;let o=(i.x+i.y)/2,l=1/.0254*96*o;for(let u=0;u<=r&&(a.unshift(new Rt({level:r-u,resolution:o,scale:l})),u!==r);u++)if(n){const f=(n[u].x+n[u].y)/2;l*=f/o,o=f}else o*=2,l*=2;const c=new A({x:s.xmin,y:s.ymax,spatialReference:e});t.tileInfo=new te({origin:c,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:a}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,s=512,i){const{width:n,height:a,nativeExtent:r,pixelSize:o,spatialReference:l}=t,c=new A({x:r.xmin,y:r.ymax,spatialReference:l});i==null&&(i=Math.max(0,Math.round(Math.log(Math.max(n,a))/Math.LN2-8)));const u=this.computeBlockBoundary(r,512,512,{x:r.xmin,y:r.ymax},[o],i);t.storageInfo=new Re({blockWidth:e,blockHeight:s,pyramidBlockWidth:e,pyramidBlockHeight:s,origin:c,firstPyramidLevel:1,maximumPyramidLevel:i,blockBoundary:u})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,s,i,n,a=0,r=2){if(n.length===1&&a>0){n=[...n];let{x:u,y:f}=n[0];for(let h=0;h<a;h++)u*=r,f*=r,n.push({x:u,y:f})}const o=[],{x:l,y:c}=i;for(let u=0;u<n.length;u++){const{x:f,y:h}=n[u];o.push({minCol:Math.floor((t.xmin-l+.1*f)/e/f),maxCol:Math.floor((t.xmax-l-.1*f)/e/f),minRow:Math.floor((c-t.ymax+.1*h)/s/h),maxRow:Math.floor((c-t.ymin-.1*h)/s/h)})}return o}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:s,pyramidScalingFactor:i}=this.rasterInfo.storageInfo;if(t===0)return e;if(s!=null&&s.length)return s[t-1];const n=i**t;return{x:e.x*n,y:e.y*n}}identifyPixelLocation(t,e,s,i){const{spatialReference:n,nativeExtent:a,storageInfo:r}=this.rasterInfo,{maximumPyramidLevel:o,origin:l,transposeInfo:c}=r,u=i&&c!=null?c.tileSize[0]:r.blockWidth,f=i&&c!=null?c.tileSize[1]:r.blockHeight,h=nt(t,n,s);if(!a.intersects(h)||e<0||e>o)return null;const m=this.getPyramidPixelSize(e),{x:y,y:g}=m,p=(l.y-h.y)/g/f,d=(h.x-l.x)/y/u,x=Math.min(f-1,Math.floor((p-Math.floor(p))*f)),w=Math.min(u-1,Math.floor((d-Math.floor(d))*u));return{pyramidLevel:e,row:Math.floor(p),col:Math.floor(d),rowOffset:x,colOffset:w,blockWidth:u,srcLocation:h}}getTileExtent(t,e,s,i,n,a){const[r,o]=a,l=i.x+s*r*t.x,c=l+r*t.x,u=i.y-e*o*t.y,f=u-o*t.y;return new L({xmin:l,xmax:c,ymin:f,ymax:u,spatialReference:n})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,s){const i=this.rasterInfo.storageInfo.blockBoundary[t];return!i||i.maxRow<e||i.maxCol<s||i.minRow>e||i.minCol>s}updateImageSpaceRasterInfo(t){const{extent:e,pixelSize:s}=t;if(e.xmin===-.5&&e.ymax===.5&&s.x===1&&s.y===1&&t.transform==null)return;const{width:i,height:n}=t,a=H.WebMercator;t.spatialReference=a,t.extent=t.nativeExtent=new L({xmin:-.5,ymax:.5,xmax:i-.5,ymin:.5-n,spatialReference:a}),t.isPseudoSpatialReference=!0,t.transform=null,t.pixelSize=new A({x:1,y:1,spatialReference:a});const{extent:r,storageInfo:o}=t;if(o){o.origin=new A({x:r.xmin,y:r.ymax,spatialReference:a});const{pyramidResolutions:l,tileInfo:c}=o;if(l&&l.forEach(u=>{u.x/=s.x,u.y/=s.y}),c){c.origin=o.origin;const u=(t.nativePixelSize.x+t.nativePixelSize.y)/2;c.lods.forEach((f,h)=>{f.resolution=u*2**h,f.scale=96*f.resolution/.0254})}}}async _fetchPixels(t,e,s,i={}){let n=_e(t);if(n>=2)return{extent:t,pixelBlock:null};const a=this._getSourceDataInfo(t,e,s,i),{pyramidLevel:r,srcResolution:o,srcExtent:l,srcWidth:c,srcHeight:u,ul:f}=a;if(c===0||u===0)return{extent:t,srcExtent:l,pixelBlock:null};const{rasterInfo:h}=this,m=h.transform,y=m?.type==="gcs-shift",g=ye(t.spatialReference)!=null;!y&&g||(n=_e(a.srcExtent,y));const p=await this._fetchRawTiles(r,f,{width:c,height:u,wrapCount:n},i);if(!p)return{extent:t,srcExtent:l,pixelBlock:null};const d=h.storageInfo,x=r>0?d.pyramidBlockWidth:d.blockWidth,w=r>0?d.pyramidBlockHeight:d.blockHeight;let{x:b,y:T}=h.pixelSize;if(r>0){const{pyramidResolutions:Z,pyramidScalingFactor:wt}=d;if(Z!=null&&Z[r-1])({x:b,y:T}=Z[r-1]);else{const qe=wt**r;b*=qe,T*=qe}}const v=h.spatialReference,S=new A({x:b,y:T,spatialReference:v}),M=x===c&&w===u&&f.x%x==0&&f.y%w==0,_=new A({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/s,spatialReference:t.spatialReference}),k=!t.spatialReference.equals(v),F=v.isGeographic?1e-9:1e-4,{datumTransformation:P}=i;if(!k&&M&&p.pixelBlocks.length===1&&x===e&&w===s&&Xi(o,_,F))return{extent:t,srcExtent:l,srcTilePixelSize:S,pixelBlock:p.pixelBlocks[0]};const C=g&&ye(l.spatialReference)!=null&&this._hasNoneOrGCSShiftTransform,$=i.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");$&&!this.rasterJobHandler&&await De();const D=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:p.extent,pixelSize:_.toJSON(),datumTransformation:P,rasterTransform:m,hasWrapAround:n>0||C,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:$},i):Bi({projectedExtent:t,srcBufferExtent:p.extent,pixelSize:_,datumTransformation:P,rasterTransform:m,hasWrapAround:n>0||C,isAdaptive:!1,includeGCSGrid:$});let N;const B=!i.requestRawData,V={rows:D.spacing[0],cols:D.spacing[1]},W=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(r,p.extent.xmin):void 0,{pixelBlocks:G,mosaicSize:Q,isPartiallyFilled:ie}=p;let U=null;if(this.rasterJobHandler)({pixelBlock:N,localNorthDirections:U}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:G,srcMosaicSize:Q,destDimension:B?{width:e,height:s}:null,coefs:B?D.coefficients:null,sampleSpacing:B?V:null,projectDirections:$,gcsGrid:$?D.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:i.interpolation,alignmentInfo:W,blockWidths:null},i));else{const Z=Te(G,Q,{alignmentInfo:W});N=B?pt(Z,{width:e,height:s},D.coefficients,V,i.interpolation):Z,$&&D.gcsGrid&&(U=_i({width:e,height:s},D.gcsGrid),N=Fi(N,this.rasterInfo.dataType,U))}return i.requestRawData||$?{extent:t,srcExtent:l,srcTilePixelSize:S,pixelBlock:N,transformGrid:D,localNorthDirections:U,isPartiallyFilled:ie}:{extent:t,srcExtent:l,srcTilePixelSize:S,pixelBlock:N}}async _fetchRawTiles(t,e,s,i){const{origin:n,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:r,blockHeight:o}=this.getBlockWidthHeight(t);let{x:l,y:c}=e,{width:u,height:f,wrapCount:h}=s;const m=this._getRasterTileAlignmentInfo(t,0);i.buffer&&(l-=i.buffer.cols,c-=i.buffer.rows,u+=2*i.buffer.cols,f+=2*i.buffer.rows);let y=0,g=0,p=0;h&&m!=null&&({worldColumnCountFromOrigin:g,originColumnOffset:p,rightPadding:y}=m,g*m.blockWidth-y>=l+u&&(y=0));const d=Math.floor(l/r),x=Math.floor(c/o),w=Math.floor((l+u+y-1)/r),b=Math.floor((c+f+y-1)/o),T=a[t];if(!T)return null;const{minRow:v,minCol:S,maxCol:M,maxRow:_}=T;if(h===0&&(b<v||w<S||x>_||d>M))return null;const k=new Array;let F=!1;const P=this.ioConfig.allowPartialFill==null?i.allowPartialFill:this.ioConfig.allowPartialFill;for(let W=x;W<=b;W++)for(let G=d;G<=w;G++){let Q=G;if(!i.disableWrapAround&&h&&m!=null&&g<=G&&(Q=G-g-p),W>=v&&Q>=S&&_>=W&&M>=Q){const ie=this._tileFetchQueue.push({pyramidLevel:t,row:W,col:Q,options:i},{signal:i.signal});P?k.push(new Promise(U=>{ie.then(Z=>U(Z)).catch(()=>{F=!0,U(null)})})):k.push(ie)}else k.push(Promise.resolve(null))}if(k.length===0)return null;const C=await Promise.all(k),$={height:(b-x+1)*o,width:(w-d+1)*r},{spatialReference:D}=this.rasterInfo,N=this.getPyramidPixelSize(t),{x:B,y:V}=N;return{extent:new L({xmin:n.x+d*r*B,xmax:n.x+(w+1)*r*B,ymin:n.y-(b+1)*o*V,ymax:n.y-x*o*V,spatialReference:D}),pixelBlocks:C,mosaicSize:$,isPartiallyFilled:F}}_fetchRawTile(t,e,s,i){const n=this.rasterInfo.storageInfo.blockBoundary[t];if(!n)return Promise.resolve(null);const{minRow:a,minCol:r,maxCol:o,maxRow:l}=n;if(e<a||s<r||e>l||s>o)return Promise.resolve(null);const c=tt(this.rasterId,i.sliceId),u=`${t}/${e}/${s}`;let f=it(c,i.registryId,u);if(f==null){const h=new AbortController;f=this.fetchRawTile(t,e,s,{...i,signal:h.signal}),st(c,i.registryId,u,f,h),f.catch(()=>Si(c,i.registryId,u))}return i.signal&&vt(i,()=>{Ti(c,i.registryId,u)}),f}_computeMagDirValues(t){const{bandCount:e,dataType:s}=this.rasterInfo;if(!(e===2&&s==="vector-magdir"||s==="vector-uv")||t?.length!==2||!t[0]?.length)return null;const i=t[0].length;if(s==="vector-magdir"){const l=t[1].map(c=>(c+360)%360);return[t[0],l]}const[n,a]=t,r=[],o=[];for(let l=0;l<i;l++){const[c,u]=Mi([n[l],a[l]]);r.push(c),o.push(u)}return[r,o]}_getRasterTileAlignmentInfo(t,e){return this._rasterTileAlignmentInfo==null&&(this._rasterTileAlignmentInfo=Ji(this.rasterInfo)),this._rasterTileAlignmentInfo.pyramidsInfo==null?null:{startX:e,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,s,i={}){const n={datumTransformation:i.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};i.srcResolution&&(n.srcResolution=i.srcResolution,this._updateSourceDataInfo(t,n));const a=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:r,srcHeight:o,pyramidLevel:l}=n,c=r/e,u=o/s,f=l<a&&c*u>=16,h=l===a&&this._requireTooManySrcTiles(r,o,e,s);if(f||h||r===0||o===0){const m=new A({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/s,spatialReference:t.spatialReference});let y=Ai(m,this.rasterInfo.spatialReference,t,n.datumTransformation);const g=!y||i.srcResolution&&y.x+y.y<i.srcResolution.x+i.srcResolution.y;if(f&&i.srcResolution&&g){const p=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(a-l+3>=p){const d=2**p;y={x:i.srcResolution.x*d,y:i.srcResolution.y*d}}}y&&(n.srcResolution=y,this._updateSourceDataInfo(t,n))}return this._requireTooManySrcTiles(n.srcWidth,n.srcHeight,e,s)&&(n.srcWidth=0,n.srcHeight=0),n}_requireTooManySrcTiles(t,e,s,i){const{tileInfo:n}=this.rasterInfo.storageInfo,a=Math.ceil(t/n.size[0])*Math.ceil(e/n.size[1]),r=t/s,o=e/i,l=Math.max(1,(s+i)/1024);return a>=Vi*l||r>at||o>at}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const{rasterInfo:s}=this,i=s.spatialReference,{srcResolution:n,datumTransformation:a}=e,{pyramidLevel:r,pyramidResolution:o,excessiveReading:l}=rt(n,s,this.ioConfig.sampling);if(l)return;let c=e.srcExtent||Ie(t,i,a);if(c==null)return;const u=s.transform;u&&(c=u.inverseTransform(c)),e.srcExtent=c;const{x:f,y:h}=s.storageInfo.origin,m=Math.floor((c.xmin-f)/o.x+.1),y=Math.floor((h-c.ymax)/o.y+.1),g=Math.floor((c.xmax-f)/o.x-.1),p=Math.floor((h-c.ymin)/o.y-.1),d=c.width<.1*o.x?0:g-m+1,x=c.height<.1*o.y?0:p-y+1;e.pyramidLevel=r,e.pyramidResolution=o,e.srcWidth=d,e.srcHeight=x,e.ul={x:m,y}}_getRequestOptionsWithSliceId(t){return this.rasterInfo.multidimensionalInfo!=null&&t.sliceId==null&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:s,position:i,pyramidLevel:n,useTransposedTile:a}=e,r=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[i]))return{location:s,value:null};const{multidimensionalInfo:o}=this.rasterInfo;if(o==null||!a){const p=t.pixels.map(w=>w[i]),d={location:s,value:p,pyramidLevel:n},x=this._computeMagDirValues(p.map(w=>[w]));return x?.length&&(d.magdirValue=x.map(w=>w[0])),d}let l=t.pixels.map(p=>p.slice(i*r,i*r+r)),c=this._computeMagDirValues(l);const{requestSomeSlices:u,identifyOptions:f}=e;let h=li(o,f.transposedVariableName);if(u){const p=ci(h,f.multidimensionalDefinition,f.timeExtent);l=l.map(d=>p.map(x=>d[x])),c=c?.map(d=>p.map(x=>d[x])),h=p.map(d=>h[d])}const m=t.noDataValues||this.rasterInfo.noDataValue,y={pixels:l,pixelType:t.pixelType};let g;return m!=null&&(ki(y,m),g=y.mask),{location:s,value:null,dataSeries:h.map((p,d)=>{const x={value:g?.[d]===0?null:l.map(w=>w[d]),multidimensionalDefinition:p.multidimensionalDefinition.map(w=>new Le({...w,isSlice:!0}))};return c?.length&&(x.magdirValue=[c[0][d],c[1][d]]),x}),pyramidLevel:n}}};function Xi(t,e,s){return Math.abs(t.x-e.x)<s&&Math.abs(t.y-e.y)<s}I([R()],J.prototype,"_rasterTileAlignmentInfo",void 0),I([R()],J.prototype,"_tileFetchQueue",void 0),I([R({readOnly:!0})],J.prototype,"_isGlobalWrappableSource",null),I([R({readOnly:!0})],J.prototype,"_hasNoneOrGCSShiftTransform",null),I([R()],J.prototype,"rasterJobHandler",null),I([R({readOnly:!0})],J.prototype,"rasterId",null),I([R(ht)],J.prototype,"url",null),I([R({type:String,json:{write:!0}})],J.prototype,"datasetName",void 0),I([R({type:String,json:{write:!0}})],J.prototype,"datasetFormat",void 0),I([R()],J.prototype,"hasUniqueSourceStorageInfo",void 0),I([R()],J.prototype,"rasterInfo",void 0),I([R()],J.prototype,"ioConfig",void 0),I([R()],J.prototype,"sourceJSON",void 0),J=I([K("esri.layers.support.rasterDatasets.BaseRaster")],J);const oe=J;function Ki(t,e){if(t.spatialReference.equals(e))return t;const s=Ve(t.spatialReference),i=Ve(e);if(s===i)return t;const n=s/i;return{x:t.x*n,y:t.y*n}}async function Ee(t,e,s){if(s.type==="extent")return Zi(t,e,s);const{width:i,height:n}=t,a=new Uint8Array(i*n),{contains:r,intersects:o}=await Ae(()=>import("./geometryEngine.ef5a0a54.js"),["assets/geometryEngine.ef5a0a54.js","assets/geometryEngineBase.99ab4263.js","assets/index.7eb0daf2.js","assets/index.d3b4073e.css","assets/hydrated.4e0a1f30.js"]);return o(e,s)?s.type==="polyline"?es(t,e,s):r(s,e)?t:Qi(t,e,s):new q({pixelType:t.pixelType,width:i,height:n,mask:a,maskIsAlpha:!1,pixels:[...t.pixels]})}function Qi(t,e,s){if(!t)return t;const{width:i,height:n}=t,a=e.width/i,r=e.height/n,{xmin:o,ymax:l}=e;let c;if(s.type==="extent"){const p=(s.xmin-o)/a,d=(s.xmax-o)/a,x=(l-s.ymax)/r,w=(l-s.ymin)/r;c=[[[p,x],[p,w],[d,w],[d,x],[p,x]]]}else c=s.rings.map(p=>p.map(([d,x])=>[(d-o)/a,(l-x)/r]));const u=document.createElement("canvas");u.width=i,u.height=n;const f=u.getContext("2d");f.fillStyle="#f00",f.beginPath(),c.forEach(p=>{f.moveTo(p[0][0],p[0][1]);for(let d=0;d<p.length;d++)f.lineTo(p[d][0],p[d][1]);f.closePath()}),f.fill();const h=f.getImageData(0,0,i,n).data,m=t.mask,y=i*n,g=new Uint8Array(y);for(let p=0;p<y;p++)m&&!m[p]||(g[p]=h[4*p+3]>127?255:0);return new q({pixelType:t.pixelType,width:i,height:n,mask:g,maskIsAlpha:!1,pixels:[...t.pixels]})}function Zi(t,e,s){const{width:i,height:n}=t,a=new Uint8Array(i*n),r=e.width/i,o=e.height/n;if(s.width/r<.5||s.height/o<.5)return new q({pixelType:t.pixelType,width:i,height:n,mask:a,pixels:[...t.pixels]});const{xmin:l,xmax:c,ymin:u,ymax:f}=e,{xmin:h,xmax:m,ymin:y,ymax:g}=s,p=Math.max(l,h),d=Math.min(c,m),x=Math.max(u,y),w=Math.min(f,g),b=.5*r,T=.5*o;if(d-p<b||w-x<T||d<l+b||p>c-b||x>f-T||w<u+T)return new q({pixelType:t.pixelType,width:i,height:n,mask:a,pixels:[...t.pixels]});const v=Math.max(0,(p-l)/r),S=Math.min(i,Math.max(0,(d-l)/r)),M=Math.max(0,(f-w)/o),_=Math.min(n,Math.max(0,(f-x)/o)),k=Math.round(v),F=Math.round(S)-1,P=Math.round(M),C=Math.round(_)-1;if(k===F&&v%1>.5&&S%1<.5||P===C&&M%1>.5&&_%1<.5)return new q({pixelType:t.pixelType,width:i,height:n,mask:a,pixels:[...t.pixels]});if(k===0&&P===0&&F===i&&C===n)return t;const $=t.mask;for(let D=P;D<=C;D++)for(let N=k;N<=F;N++){const B=D*i+N;a[B]=$?$[B]:255}return new q({pixelType:t.pixelType,width:i,height:n,mask:a,pixels:[...t.pixels]})}function es(t,e,s){const{width:i,height:n}=t,a=new Uint8Array(i*n),r=e.width/i,o=e.height/n,{xmin:l,ymax:c}=e,{paths:u}=s,f=t.mask;for(let h=0;h<u.length;h++){const m=u[h];for(let y=0;y<m.length-1;y++){const[g,p]=m[y],[d,x]=m[y+1];let w=Math.floor((c-p)/o),b=Math.floor((c-x)/o);if(b<w){const v=w;w=b,b=v}w=Math.max(0,w),b=Math.min(n-1,b);const T=(d-g)/(x-p);for(let v=w;v<=b;v++){const S=v===w?Math.max(p,x):(n+1-v)*o,M=v===b?Math.min(p,x):S-o;let _=Math.floor(x===p?(g-l)/r:(T*(S-p)+g-l)/r),k=Math.floor(x===p?(d-l)/r:(T*(M-p)+g-l)/r);if(k<_){const P=_;_=k,k=P}const F=v*i;_=Math.max(0,_),k=Math.min(i-1,k);for(let P=F+_;P<=F+k;P++)a[P]=f?f[P]:255}}}return new q({pixelType:t.pixelType,width:i,height:n,mask:a,pixels:[...t.pixels]})}function ts(t,e,s,i=!0){const{spatialReference:n}=t,{x:a,y:r}=Ki(s,n);let o,l,c;const u=e.type==="extent"?e:e.extent;let{xmin:f,xmax:h,ymax:m,ymin:y}=u;const{xmin:g,ymax:p}=t.extent;return i?(f=g+(f>g?a*Math.round((f-g)/a):0),m=p-(m<p?r*Math.round((p-m)/r):0),h=g+(h>g?a*Math.round((h-g)/a):0),y=p-(y<p?r*Math.round((p-y)/r):0),o=new L({xmin:f,ymax:m,xmax:h,ymin:y,spatialReference:n}),l=Math.round(o.width/a),c=Math.round(o.height/r)):(l=Math.floor((h-f)/a+.8),c=Math.floor((m-y)/r+.8),f=g+(f>g?a*Math.floor((f-g)/a+.1):0),m=p-(m<p?r*Math.floor((p-m)/r+.1):0),h=f+l*a,y=m-c*r,o=new L({xmin:f,ymax:m,xmax:h,ymin:y,spatialReference:n})),{extent:o,width:l,height:c}}const is=40;let se=class extends oe{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async open(t){await this.init();const{rasterFunction:e}=this;this.primaryRasters?.rasters?.length?e.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=e.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach(c=>c.rasterJobHandler=this.rasterJobHandler));const{rasters:s,rasterIds:i}=this.primaryRasters,n=s.map(c=>c.rasterInfo?void 0:c.open(t));await Promise.all(n);const a=s.map(({rasterInfo:c})=>c),r=e.bind({rasterInfos:a,rasterIds:i});if(e.rawSourceRasterInfos=a,!r.success||a.length===0)throw new O("raster-function:open",`cannot bind the function: ${r.error??""}`);const o=e.functionName==="Table"?e:e.functionArguments?.raster;o?.functionName==="Table"&&(e.rasterInfo.attributeTable=We.fromJSON(o.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const l=a[0];this.hasUniqueSourceStorageInfo=a.length===1||a.slice(1).every(c=>ss(c,l)),this.set("sourceJSON",s[0].sourceJSON),this.set("rasterInfo",e.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(t,e,s,i={}){const{rasters:n,rasterIds:a}=this.primaryRasters;let r=!1;const{interpolation:o}=i,l=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!i.requestRawData&&l&&(r=n.length===1&&!i.skipRasterFunction,i={...i,interpolation:"bilinear",requestRawData:r});const c=n.map(w=>w.fetchPixels(t,e,s,i)),u=await Promise.all(c),f=u.map(w=>w.pixelBlock),h=r||i.requestRawData?u.map(w=>w.srcTilePixelSize):null;if(i.skipRasterFunction||f.every(w=>w==null))return u[0];const m=u.find(w=>w.pixelBlock!=null)?.extent??t;let y=this.rasterJobHandler?await this.rasterJobHandler.process({extent:m,primaryPixelBlocks:f,primaryPixelSizes:h,primaryRasterIds:a}):this.rasterFunction.process({extent:m,primaryPixelBlocks:f,primaryPixelSizes:h,primaryRasterIds:a});const{transformGrid:g}=u[0];if(!r||y==null||g==null){const w=i.noClip?null:this.getClippingGeometry(m.spatialReference);return i.noClip||i.requestRawData||y==null||!w||(y=await Ee(y,m,w)),{...u[0],pixelBlock:y}}const p={rows:g.spacing[0],cols:g.spacing[1]};let d;this.rasterJobHandler?d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[y],srcMosaicSize:{width:y.width,height:y.height},destDimension:{width:e,height:s},coefs:g.coefficients,sampleSpacing:p,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:o,alignmentInfo:void 0,blockWidths:null},i)).pixelBlock:d=pt(y,{width:e,height:s},g.coefficients,p,o);const x=i.noClip?null:this.getClippingGeometry(t.spatialReference);return i.noClip||i.requestRawData||d==null||x==null||(d=await Ee(d,t,x)),{extent:t,srcExtent:u[0].srcExtent,pixelBlock:d}}getClippingGeometry(t){const e=this._clippingGeometry.get("0");if(!t||!e)return e;const s=ns(t);let i=this._clippingGeometry.get(s);return i!=null||(i=t.equals(e.spatialReference)?e:Ne(e,t),this._clippingGeometry.set(s,i)),i}async _updateClipGeometry(){const t=this.rasterFunction.getClippingGeometries()[0];let e=t?.clippingGeometry;if(e&&t.clippingType==="inside"){const{extent:s}=this.rasterInfo,{difference:i,densify:n}=await Ae(()=>import("./geometryEngine.ef5a0a54.js"),["assets/geometryEngine.ef5a0a54.js","assets/geometryEngineBase.99ab4263.js","assets/index.7eb0daf2.js","assets/index.d3b4073e.css","assets/hydrated.4e0a1f30.js"]);let a=n(Tt.fromExtent(s),2*(s.width+s.height)/is);a=Ne(a,e.spatialReference),e=i(a,e)}this._clippingGeometry.clear(),e&&this._clippingGeometry.set("0",e)}};I([R({type:String,json:{write:!0}})],se.prototype,"datasetFormat",void 0),I([R()],se.prototype,"tileType",void 0),I([R()],se.prototype,"rasterFunction",void 0),I([R()],se.prototype,"primaryRasters",void 0),se=I([K("esri.layers.support.rasterDatasets.FunctionRaster")],se);const yt=se;function ss(t,e){const{storageInfo:s,pixelSize:i,spatialReference:n,extent:a}=t,{storageInfo:r,pixelSize:o,spatialReference:l,extent:c}=e;return i.x===o.x&&i.y===o.y&&n.equals(l)&&a.equals(c)&&s.blockHeight===r.blockHeight&&s.blockWidth===r.blockWidth&&s.maximumPyramidLevel===r.maximumPyramidLevel}function ns(t){return String(t.wkid??t.wkt??t.wkt2)}const rs=t=>{let e=class extends t{constructor(...i){super(...i),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=i[0]?.raster?.datasetFormat==="Function"}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(i){this._set("multidimensionalDefinition",i),this.updateRenderer()}set rasterFunction(i){i?.functionName?.toLowerCase()==="none"&&(i=void 0),this._set("rasterFunction",i),this.updateRasterFunction()}get rasterInfo(){return Ft(ae.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(i){this._set("url",lt(i,ae.getLogger(this)))}set renderer(i){i==null&&this.rasterFunction==null?this._configDefaultRenderer("override"):(this._set("renderer",i),this.updateRenderer())}readRenderer(i,n,a){const r=n?.layerDefinition?.drawingInfo?.renderer;return Qt(r,a)||void 0}async convertVectorFieldData(i,n){const{serviceRasterInfo:a}=this;if(i==null||!a)return null;const r=this._rasterJobHandler.instance,o=a.dataType;return r?r.convertVectorFieldData({pixelBlock:i,dataType:o},n):Ci(i,o)}async computeStatisticsHistograms(i,n){await this.load(n),i=Je(Zt,i).clone();const{serviceRasterInfo:a}=this;if(a==null)throw new O("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:r}=i;if(r==null)throw new O("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let o=r;const{spatialReference:l}=a;r.spatialReference.equals(l)||(await De(),o=r.type==="extent"?Ie(r,l):Ne(r,l));const c=i.pixelSize??new A({x:a.pixelSize.x,y:a.pixelSize.y,spatialReference:l}),{extent:u,width:f,height:h}=ts(a,o,c),m=await this.fetchPixels(u,f,h,{...n,interpolation:"nearest"});if(m.pixelBlock==null)throw new O("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const y=await Ee(m.pixelBlock,u,o),g=this._rasterJobHandler.instance;return g?g.computeStatisticsHistograms({pixelBlock:y},n):He(y)}async createFlowMesh(i,n){const a=this._rasterJobHandler.instance;return a?a.createFlowMesh(i,n):Oi(i.meshType,i.simulationSettings,i.flowData,n.signal!=null?n.signal:new AbortController().signal)}normalizeRasterFetchOptions(i){const{multidimensionalInfo:n}=this.serviceRasterInfo??{};if(n==null)return i;let a=i.multidimensionalDefinition||this.multidimensionalDefinition;a?.length||(a=Qe(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const r=i.timeExtent||this.timeExtent;if(a!=null&&r!=null&&(r.start!=null||r.end!=null)){a=a.map(g=>g.clone());const o=n.variables.find(({name:g})=>g===a[0].variableName)?.dimensions?.find(({name:g})=>g==="StdTime"),l=a.find(({dimensionName:g})=>g==="StdTime");if(!o||!l)return{...i,multidimensionalDefinition:null};const{start:c,end:u}=r,f=c==null?null:c.getTime(),h=u==null?null:u.getTime(),m=f??h,y=h??f;if(o.values!=null){const g=o.values.filter(p=>{if(Array.isArray(p)){if(m===y)return p[0]<=m&&p[1]>=m;const d=p[0]<=m&&p[1]>m||p[0]<y&&p[1]>=y,x=p[0]>=m&&p[1]<=y||p[0]<m&&p[1]>y;return d||x}return m===y?p===m:p>=m&&p<=y});if(g.length){const p=g.sort((d,x)=>{const w=Array.isArray(d)?d[0]:d,b=Array.isArray(d)?d[1]:d,T=Array.isArray(x)?x[0]:x,v=Array.isArray(x)?x[1]:x;return m===y?w-T:Math.abs(b-y)-Math.abs(v-y)})[0];l.values=[p]}else a=null}else if(o.hasRegularIntervals&&o.extent){const[g,p]=o.extent;m>p||y<g?a=null:l.values=m===y?[m]:[Math.max(g,m),Math.min(p,y)]}}return a!=null&&ui(a,this.multidimensionalSubset)?{...i,multidimensionalDefinition:null}:{...i,multidimensionalDefinition:a}}async updateRasterFunction(){if(!this.loaded||this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const u=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&u&&this._set("rasterFunction",$e.fromJSON(u)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let i,n=this.raster,a=!1;n.datasetFormat==="Function"?(i=n.primaryRasters.rasters,n=i[0],a=!0):i=[n];const{rasterFunction:r}=this;if(r){const u={raster:n};i.length>1&&i.forEach(m=>u[m.url]=m);const f=dt(r.functionDefinition?.toJSON()??r.toJSON(),u),h=new yt({rasterFunction:f});h.rasterJobHandler=this._rasterJobHandler.instance,await h.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=h}else this.raster=n,this._cachedRasterFunctionJson=null,await n.when();if(this._cachedRendererJson=null,!a&&!r)return;const{bandIds:o}=this,{bandCount:l}=this.raster.rasterInfo,c=o?.length?o.some(u=>u>=l):l>=3;o&&(c||this.renderer&&this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:i,symbolizer:n}=this;if(!i||!n||!this.renderer)return;const{rasterInfo:a}=this.raster,r=Ze(a,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),o=r?.name,l=Ye({...this.renderer.toJSON(),variableName:o});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(l))return;const c=this._rasterJobHandler.instance;c&&(n.rasterInfo=Xe(a,o),n.rendererJSON=l,n.bind(),await c.updateSymbolizer(n),this._cachedRendererJson=l)}async applyRenderer(i,n){const a=i?.pixelBlock;if(!(a!=null&&a.pixels&&a.pixels.length>0))return null;let r;await this.updateRenderer();const o=this._rasterJobHandler.instance,l=this.bandIds??[];return r=o?await o.symbolize({...i,simpleStretchParams:n,bandIds:l}):this.symbolizer.symbolize({...i,simpleStretchParams:n,bandIds:l}),r}getTileUrl(i,n,a){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${i}/${n}/${a}`:""}getCompatibleTileInfo(i,n,a=!1){if(!this.loaded||n==null)return null;if(a&&i.equals(this.spatialReference))return this.tileInfo;const r=Mt(i);return te.create({size:256,spatialReference:i,origin:r?{x:r.origin[0],y:r.origin[1]}:{x:n.xmin,y:n.ymax}})}getCompatibleFullExtent(i){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(i)||(this._compatibleFullExtent=this.raster.computeExtent(i)),this._compatibleFullExtent):null}async fetchTile(i,n,a,r={}){if(s(this),r.requestAsImageElement){const l=this.getTileUrl(i,n,a);return ct(l,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:r.signal}).then(c=>c.data)}const{serviceRasterInfo:o}=this;if(o.multidimensionalInfo!=null&&(r=this.normalizeRasterFetchOptions(r)).multidimensionalDefinition==null){const l=r.tileInfo||o.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(i,n,a,l),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer?.type==="raster-shaded-relief"&&(r={...r,buffer:{cols:1,rows:1}}),this.raster.fetchTile(i,n,a,r)}async fetchPixels(i,n,a,r={}){return this.serviceRasterInfo.multidimensionalInfo!=null&&(r=this.normalizeRasterFetchOptions(r)).multidimensionalDefinition==null?{extent:i,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),n=Math.round(n),a=Math.round(a),this.raster.fetchPixels(i,n,a,r))}async identify(i,n={}){await this.load();const{raster:a,serviceRasterInfo:r}=this;if(r?.multidimensionalInfo!=null&&!(r.hasMultidimensionalTranspose&&!!(ft(n.multidimensionalDefinition)||n.transposedVariableName||n.timeExtent))&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null)return{location:i,value:null};const o=this.multidimensionalSubset?.areaOfInterest;if(o&&!o.contains(i))throw new O("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return a.identify(i,n)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const i=this.serviceRasterInfo?.multidimensionalInfo;if(i==null||this.serviceRasterInfo?.dataType!=="standard-time")return!1;const n=this.multidimensionalDefinition,a=n?.[0]?.variableName;return i.variables.some(r=>r.name===a&&(!n?.[0].dimensionName||r.dimensions.some(o=>o.name==="StdTime")))}getStandardTimeValue(i){return new Date(24*(i-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(i){const n=i??this.serviceRasterInfo?.multidimensionalInfo;return hi(this.multidimensionalSubset,n)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Qe(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&this.raster.datasetFormat==="Function"&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const i=new si;return this._rasterJobHandler.connectionPromise=i.initialize().then(async()=>{s(this),this._rasterJobHandler.instance=i,this.raster.rasterJobHandler=i,this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch(()=>{}),this.renderer&&this.updateRenderer()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(this.interpolation==null){s(this);const{raster:i}=this,n=ei(i.rasterInfo,i.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",n)}}_configDefaultRenderer(i="no"){s(this);const{rasterInfo:n}=this.raster;!this.bandIds&&n.bandCount>1&&(this.bandIds=ti(n));const a=Ze(n,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),r=a?.name,o=ii(this.raster);if(!this.renderer||i==="override"){const f=Ke(n,{bandIds:this.bandIds,variableName:r,rasterFunctionColorRamp:o}),h=n.statistics,m=h&&h.length>0?h[0]:null,y=m?.max??0,g=m?.min??0;this.raster.datasetFormat==="WCSServer"&&f.type==="raster-stretch"&&(y>1e24||g<-1e24)&&(f.dynamicRangeAdjustment=!0,f.statistics=null,f.stretchType==="none"&&(f.stretchType="min-max")),this.renderer=f}const l=Ye({...this.renderer.toJSON(),variableName:r}),c=Xe(n,r);this.symbolizer?(this.symbolizer.rendererJSON=l,this.symbolizer.rasterInfo=c):this.symbolizer=new mi({rendererJSON:l,rasterInfo:c});const u=this.symbolizer.bind();if(u.success){if(i==="auto"){const{colormap:f}=this.raster.rasterInfo,h=this.renderer;if(f!=null&&h.type==="raster-colormap"){const m=Ke(this.raster.rasterInfo);JSON.stringify(m)!==JSON.stringify(h)&&this._configDefaultRenderer("override")}else if(h.type==="raster-stretch"){const m=this.bandIds?.length,y=h.statistics?.length;!h.dynamicRangeAdjustment&&y&&m&&y!==m&&this._configDefaultRenderer("override")}}}else ae.getLogger(this).warn("imagery-tile-mixin",u.error||"The given renderer is not supported by the layer."),i==="auto"&&this._configDefaultRenderer("override")}};function s(i){if(!i.raster||!i.serviceRasterInfo)throw new O("imagery-tile","no raster")}return I([R({clonable:!1})],e.prototype,"_cachedRendererJson",void 0),I([R({clonable:!1})],e.prototype,"_cachedRasterFunctionJson",void 0),I([R({clonable:!1})],e.prototype,"_compatibleFullExtent",void 0),I([R({clonable:!1})],e.prototype,"_isConstructedFromFunctionRaster",void 0),I([R({clonable:!1})],e.prototype,"_rasterJobHandler",void 0),I([R()],e.prototype,"bandIds",void 0),I([R({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),I([R({json:{read:!1}})],e.prototype,"fullExtent",null),I([R()],e.prototype,"interpolation",void 0),I([R()],e.prototype,"ioConfig",void 0),I([R({type:[Le],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),I([R({type:Yt,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),I([R()],e.prototype,"raster",void 0),I([R({type:$e,json:{name:"renderingRule",write:!0}})],e.prototype,"rasterFunction",null),I([R({readOnly:!0})],e.prototype,"rasterInfo",null),I([R()],e.prototype,"serviceRasterInfo",void 0),I([R()],e.prototype,"sourceJSON",void 0),I([R({readOnly:!0,type:H,json:{read:!1}})],e.prototype,"spatialReference",void 0),I([R({type:te})],e.prototype,"tileInfo",void 0),I([R(ht)],e.prototype,"url",null),I([R({types:Xt,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const i=this.renderer?.type==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!i}}},origins:{"web-scene":{types:Kt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:i=>({enabled:i&&i.type!=="vector-field"&&i.type!=="flow"})}}}}})],e.prototype,"renderer",null),I([_t("renderer")],e.prototype,"readRenderer",null),I([R({clonable:!1})],e.prototype,"symbolizer",void 0),e=I([K("esri.layers.mixins.ImageryTileMixin")],e),e};function gt(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function xt(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function as(t){const{axes:e}=t.domain,s=Object.keys(e),i=[],n=[];let a=-1,r=-1,o=[];for(let x=0;x<s.length;x++){const w=s[x];gt(w)?a=x:xt(w)&&(r=x);const b=e[w],T=[];if("values"in b){b.values.forEach(S=>T.push(typeof S=="string"?new Date(S).getTime():S));const v=T[1]-T[0];i.push([T[0]-.5*v,T[T.length-1]+.5*v]),n.push(v)}else{const{start:v,stop:S,num:M}=b,_=(S-v)/(M-1);i.push([v-.5*_,S+.5*_]),n.push(_);for(let k=0;k<M;k++)T.push(v+_*k)}o.push({name:w,values:T,extent:[T[0],T[T.length-1]]})}a>-1&&r===-1?r=a===0?1:0:r>-1&&a===-1?a=r===0?1:0:r===-1&&a===-1&&(a=0,r=1),o=o.filter((x,w)=>!(w===a||w===r));const{referencing:l}=t.domain,c=l.find(x=>x.coordinates.includes(s[a])).system.id,u=c?.slice(c.lastIndexOf("/")+1),f=u==null||u==="CRS84"?4326:Number(u),h=new H({wkid:f}),[m,y]=i[a],[g,p]=i[r],d=new L({xmin:m,xmax:y,ymin:g,ymax:p,spatialReference:h});return{width:Math.round(d.width/n[a]),height:Math.round(d.height/n[r]),extent:d,dimensions:o}}function Fe(t){const e=Ct();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function Me(){return Math.round(255*Math.random())}function os(t){const e={},{parameters:s}=t;if(!s)return e;for(const[i,n]of Object.entries(s)){const{type:a,description:r,unit:o,categoryEncoding:l,observedProperty:c}=n;if(a==="Parameter"&&(e[i]={},r&&(e[i].description=Fe(r)),o&&(e[i].unit=o.label?Fe(o.label):null,e[i].symbol=o.symbol?.value),l)){const u=Object.entries(l).map((m,y)=>({OID:y,Value:Number(m[1]),ClassName:m[0].slice(m[0].lastIndexOf("/")+1),Count:1}));let f=!1;c?.categories?.length&&(c.categories.forEach(m=>{if(!m.id)return;const y=m.id.slice(m.id.lastIndexOf("/")+1),g=u.find(d=>d.ClassName===y);if(!g)return;const p=m.label?Fe(m.label):null;if(g.Label=p,m.preferredColor){const d=kt.fromHex(m.preferredColor);d&&(f=!0,g.Red=d.r,g.Green=d.g,g.Blue=d.b)}}),f&&u.forEach(m=>{m.Red==null&&(m.Red=Me(),m.Green=Me(),m.Blue=Me())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(m=>({attributes:m}))};f&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[i].attributeTable=h}}return e}function ls(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let i=0;i<t.length;i++){const n=t[i];n!=null&&(n<e&&(e=n),n>s&&(s=n))}return Pi(e,s)}function cs(t,e,s){const i=t.map((l,c)=>({name:l,count:e[c]})).sort((l,c)=>l.name>c.name?-1:1),n=(a=1,l=>a*=l.count);var a;const r=[...i.slice(1),{name:"",count:1}].reverse().map(n).reverse();let o=0;for(let l=t.length-1;l>=0;l--)o+=r[i.findIndex(({name:c})=>c===t[l])]*(s%e[l]),s=Math.floor(s/e[l]);return o}function us(t){const{width:e,height:s,extent:i,dimensions:n}=as(t),{ranges:a}=t,r=Object.keys(a).sort((h,m)=>h<m?-1:1),o=[];for(let h=0;h<r.length;h++){const m=r[h];n?.length&&o.push({name:m,dimensions:n})}const l=os(t);o.forEach(h=>l[h.name]&&Object.assign(h,l[h.name]));const c=o.length?{variables:o}:void 0,u=[];for(let h=0;h<r.length;h++){const m=r[h],{values:y,dataType:g,axisNames:p,shape:d}=a[m],x=d.length>2?h*d.slice(0,-2).reduce((M,_)=>M*_):0,w=p.slice(0,-2),b=d.slice(0,-2),T=g==="float"?"f32":ls(y),v=e*s,S=y.length/v;for(let M=0;M<S;M++){const _=q.createEmptyBand(T,v),k=new Uint8Array(v).fill(255);let F=!1;const P=M*v;for(let C=0;C<v;C++){const $=y[P+C];$==null?(k[C]=0,F=!0):_[C]=$}if(h===0||n?.length){const C=new q({width:e,height:s,mask:F?k:null,pixels:[_],pixelType:T});C.updateStatistics(),n?.length?u[cs(w,b,M)+x]=C:u.push(C)}else{const C=u[M];C.pixels.push(_),F?C.mask&&(C.mask=q.combineBandMasks([C.mask,k])):C.mask=F?k:null}}}const f=Object.values(l).find(h=>h.attributeTable)?.attributeTable;return{extent:i,pixelBlocks:u,multidimensionalInfo:c,attributeTable:f,bandNames:c?void 0:r}}let le=class extends oe{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}async open(t){await this.init();const e=this.source,{pixelBlocks:s,attributeTable:i,statistics:n,histograms:a,name:r,nativeExtent:o,transform:l}=e,c=s[0],{width:u,height:f,pixelType:h}=c,m=e.extent??new L({xmin:-.5,ymin:.5,xmax:u-.5,ymax:f-.5,spatialReference:new H({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,g={x:m.width/u,y:m.height/f},p={...e.keyProperties};i&&(p.DataType="Thematic");const d=new ve({width:u,height:f,pixelType:h,extent:m,nativeExtent:o,attributeTable:i,transform:l,pixelSize:g,spatialReference:m.spatialReference,bandCount:c.pixels.length,keyProperties:p,multidimensionalInfo:e.multidimensionalInfo,statistics:n,isPseudoSpatialReference:y,histograms:a});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(d),this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),d.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,d.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},t),d.multidimensionalInfo||(this.source=null),this.datasetName=r}fetchRawTile(t,e,s,i={}){if(!this._pixelBlockTiles){const{rasterInfo:a}=this,[r,o]=a.storageInfo.tileInfo.size,{sliceId:l}=i,{pixelBlocks:c}=this.source,u={pixelBlock:l==null?c[0]:c[l],useBilinear:a.dataType!=="thematic",tileSize:{width:r,height:o},level:t,row:e,col:s},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,i):$i(u);return Promise.resolve(f)}const n=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(n)}async _buildInMemoryRaster(t,e,s){const{rasterInfo:i}=this,n=i.storageInfo.maximumPyramidLevel??0,a=i.dataType!=="thematic",r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:n,useBilinear:a},s):Promise.resolve(Di(t,e,n,a)),o=i.statistics!=null,l=i.histograms!=null,c=this.ioConfig.skipStatistics||o?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve(pi(t)),u=await ut([r,c]);if(!u[0].value&&u[1].value)throw new O("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,o||(i.statistics=u[1].value?.statistics),l||(i.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let i=0;i<e.variables.length;i++){const n=e.variables[i];if(n.statistics)continue;const a=n.dimensions.map(c=>new Le({variableName:n.name,dimensionName:c.name,values:[c.values?.[0]??c.extent?.[0]],isSlice:!0})),r=mt(a,e),o=r==null?null:t[r];if(o==null)continue;const l=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:o},s):He(o);n.statistics=l.statistics,n.histograms||(n.histograms=l.histograms)}}};I([R({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),I([R()],le.prototype,"source",void 0),I([R()],le.prototype,"url",null),le=I([K("esri.layers.support.rasterDatasets.InMemoryRaster")],le);const je=le;let fe=class extends oe{constructor(){super(...arguments),this.datasetFormat="CovJSON"}async open(t){await this.init();const{extent:e,pixelBlocks:s,multidimensionalInfo:i,attributeTable:n,bandNames:a}=await this._fetchData(t),{statistics:r,histograms:o}=He(s[0]),l=a?.map(h=>({BandName:h})),c={DataType:n?"Thematic":i?"Scientific":"Generic",BandProperties:l},u=new je({source:{extent:e,pixelBlocks:s,attributeTable:n?We.fromJSON(n):null,multidimensionalInfo:i,statistics:r,histograms:o,keyProperties:c,isPseudoSpatialReference:!1}});await u.open(),this._inMemoryRaster=u;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",u.rasterInfo)}fetchRawTile(t,e,s,i={}){return this._inMemoryRaster.fetchRawTile(t,e,s,i)}async _fetchData(t){const e=this.source??(await this.request(this.url,{signal:t?.signal})).data,s="imagery-tile-layer:open-coverage-json";if(e.type?.toLowerCase()!=="coverage"||e.domain?.domainType?.toLowerCase()!=="grid")throw new O(s,"Only coverage with Grid domain type is supported");if(!e.ranges)throw new O(s,"Missing ranges in the grid coverage data");if(!e.domain.referencing?.length)throw new O(s,"Missing domain referencing in the grid coverage data");const i=Object.values(e.ranges);for(let n=0;n<i.length;n++){const{axisNames:a,shape:r,type:o,values:l}=i[n];if(!(o.toLowerCase()==="ndarray"&&l?.length&&a?.length&&r?.length))throw new O(s,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(gt(a[a.length-1])&&xt(a[a.length-2])))throw new O(s,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return us(e)}};I([R({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),I([R({constructOnly:!0})],fe.prototype,"source",void 0),fe=I([K("esri.layers.support.rasterDatasets.CovJSONRaster")],fe);const hs=fe;function he(t,e){if(!t||!e)return[];let s=e;e.includes("/")?(s=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const i=[];if(e){const a=he(t,s);for(let r=0;r<a.length;r++)he(a[r],e).forEach(o=>i.push(o));return i}const n=t.getElementsByTagNameNS("*",s);if(!n||n.length===0)return[];for(let a=0;a<n.length;a++)i.push(n[a]||n.item(a));return i}function j(t,e){if(!t||!e)return null;let s=e;e.includes("/")?(s=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const i=he(t,s);return i.length>0?e?j(i[0],e):i[0]:null}function X(t,e=null){const s=e?j(t,e):t;let i;return s?(i=s.textContent||s.nodeValue,i?i.trim():null):null}function fs(t,e){const s=he(t,e),i=[];let n;for(let a=0;a<s.length;a++)n=s[a].textContent||s[a].nodeValue,n&&(n=n.trim(),n!==""&&i.push(n));return i}function xe(t,e){return fs(t,e).map(s=>Number(s))}function re(t,e){const s=X(t,e);return Number(s)}function ke(t,e){const s=t?.nodeName?.toLowerCase(),i=e.toLowerCase();return s.slice(s.lastIndexOf(":")+1)===i}function ot(t,e){if(!t||!e)return null;const s=[];for(let i=0;i<t.length;i++)s.push(t[i]),s.push(e[i]);return s}function ms(t){const e=j(t,"GeodataXform"),s=Se(re(e,"SpatialReference/WKID")||X(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const i=re(e,"PolynomialOrder")??1,n=xe(e,"CoeffX/Double"),a=xe(e,"CoeffY/Double"),r=xe(e,"InverseCoeffX/Double"),o=xe(e,"InverseCoeffY/Double"),l=ot(n,a),c=ot(r,o);return{spatialReference:s,transform:l&&c&&l.length&&c.length?new Ge({spatialReference:s,polynomialOrder:i,forwardCoefficients:l,inverseCoefficients:c}):null}}function ps(t){const e=re(t,"NoDataValue"),s=j(t,"Histograms/HistItem"),i=re(s,"HistMin"),n=re(s,"HistMax"),a=re(s,"BucketCount"),r=X(s,"HistCounts")?.split("|").map(h=>Number(h));let o,l,c,u;he(t,"Metadata/MDI").forEach(h=>{const m=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=m;break;case"STATISTICS_MAXIMUM":l=m;break;case"STATISTICS_MEAN":c=m;break;case"STATISTICS_STDDEV":u=m}});const f=re(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:r?.length&&i!=null&&n!=null?{min:i,max:n,size:a||r.length,counts:r}:null,sourceBandIndex:f,statistics:o!=null&&l!=null?{min:o,max:l,avg:c,stddev:u}:null}}function Se(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new H({wkid:e});if(t=String(t).trim(),Ot(t))return new H({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const i=s.indexOf("VERTCS"),n=s.indexOf("PROJCS"),a=n>-1?n:s.indexOf("GEOGCS");if(a===-1)return null;const r=t.slice(a,t.lastIndexOf("]",i)+1).trim(),o=t.slice(i,t.lastIndexOf("]")).trim();e=Ce(r);const l=new H(e?{wkid:e}:{wkt:r}),c=Ce(o);return c&&(l.vcsWkid=c),l}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=Ce(t),new H(e!==0?{wkid:e}:{wkt:t})):null}function Ce(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(n=>n.trim()).filter(n=>n!==""),s=e[e.length-1].split(","),i=s[0]?.toLowerCase();if((i==="epsg"||i==="esri")&&t.endsWith('"]]')){const n=Number(s[1]);if(!isNaN(n)&&n!==0)return n}return 0}function Ue(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(ke(i,"SRS")){if(!e.spatialReference){const n=X(i);e.spatialReference=Se(n)}}else if(ke(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:n,transform:a}=ms(i);e.transform=a,e.spatialReference||(e.spatialReference=n)}else he(i,"MDI").forEach(n=>e.metadata[n.getAttribute("key")]=X(n));else if(ke(i,"PAMRasterBand")){const n=ps(i);n.sourceBandIndex!=null&&e.rasterBands[n.sourceBandIndex]==null?e.rasterBands[n.sourceBandIndex]=n:e.rasterBands.push(n)}}});const s=e.rasterBands;if(s.length){const i=!!s[0].statistics;e.statistics=i?s.map(a=>a.statistics).filter(Pe):null;const n=!!s[0].histogram;e.histograms=n?s.map(a=>a.histogram).filter(Pe):null}return e}let be=class extends oe{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:s,statistics:i,histograms:n,transform:a}=await this._fetchAuxiliaryData(t);const r=!s;r&&(s=new H({wkid:3857})),n?.length&&i==null&&(i=ze(n));const{width:o,height:l}=e;let c=new L({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:s});const u=a?a.forwardTransform(c):c;let f=!0;if(a){const m=a.forwardCoefficients;f=m&&m[1]===0&&m[2]===0,f&&(a=null,c=u)}const h=new je({source:{extent:u,nativeExtent:c,transform:a,pixelBlocks:[e],statistics:i,histograms:n,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:r},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}fetchRawTile(t,e,s,i={}){return this._inMemoryRaster.fetchRawTile(t,e,s,i)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),s=di(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new O("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const i=s.toLowerCase(),n=i==="gif"||i==="bmp"||!Pt("ios"),a=await this.decodePixelBlock(e,{format:i,useCanvas:n,hasNoZlibMask:!0});if(a==null)throw new O("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:s=[],skipMapInfo:i}=this.ioConfig,n=i||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),a=this.datasetFormat,r=a==="JPG"?"jgw":a==="PNG"?"pgw":a==="BMP"?"bpw":null,o=r&&s.includes(r)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+r,{responseType:"text",signal:e}),l=await ut([n,o]);if(e?.aborted)throw $t();const c=Ue(l[0].value?.data);if(!c.transform){const u=l[1].value?l[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;c.transform=u?.length===6?new Ge({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return c}};I([R({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0),be=I([K("esri.layers.support.rasterDatasets.ImageAuxRaster")],be);const we=be;let me=class extends oe{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(t){await this.init();const e=t?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=s.data;if(this.sourceJSON=i,!i)throw new O("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new O("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const n=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=i.cacheType,this.tileType==null&&(n.includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":i.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:e});if(a==null)throw new O("image-server-raster:open","cannot initialize image service");ni(a,i);const r=this.tileType==="Map"?ds(i.tileInfo,i):te.fromJSON(i.tileInfo);Dt(r);const[o,l]=this._computeMinMaxLOD(a,r),{extent:c,pixelSize:u}=a,f=.5/a.width*u.x,h=Math.max(u.x,u.y),{lods:m}=r;(this.tileType!=="Map"&&i.maxScale!==0||Math.abs(u.x-u.y)>f||!m.some(S=>Math.abs(S.resolution-h)<f))&&(u.x=u.y=o.resolution,a.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),a.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const y=o.level-l.level,[g,p]=r.size,d=[],x=[];m.forEach((S,M)=>{S.level>=l.level&&S.level<=o.level&&d.push({x:S.resolution,y:S.resolution}),M<m.length-1&&x.push(Math.round(10*S.resolution/m[M+1].resolution)/10)}),d.sort((S,M)=>S.x-M.x);const w=this.computeBlockBoundary(c,g,p,r.origin,d,y),b=d.length>1?d.slice(1):null;let T;i.transposeInfo&&(T={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const v=x.length<=1||x.length>=3&&x.slice(0,-1).every(S=>S===x[0])?x[0]??2:Math.round(10/(l.resolution/o.resolution)**(-1/y))/10;if(a.storageInfo=new Re({blockWidth:r.size[0],blockHeight:r.size[1],pyramidBlockWidth:r.size[0],pyramidBlockHeight:r.size[1],pyramidResolutions:b,pyramidScalingFactor:v,compression:r.format,origin:r.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:r,transposeInfo:T,blockBoundary:w}),ys(a),this._set("rasterInfo",a),i.capabilities.toLowerCase().includes("tilemap")){const S={tileInfo:a.storageInfo.tileInfo,parsedUrl:Nt(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Ui({layer:S})}}async fetchRawTile(t,e,s,i={}){const{storageInfo:n,extent:a}=this.rasterInfo,{transposeInfo:r}=n,o=r!=null&&!!i.transposedVariableName;if(this._slices&&!o&&i.sliceId==null)return null;const l=o?0:n.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${l}/${e}/${s}`,u=this._slices?o?{variable:i.transposedVariableName}:{sliceId:i.sliceId||0}:null,{data:f}=await this.request(c,{query:u,responseType:"array-buffer",signal:i.signal});if(!f)return null;const h=o?r.tileSize:n.tileInfo.size,m=await this.decodePixelBlock(f,{width:h[0],height:h[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:o,noDataValue:this.rasterInfo.noDataValue});if(m==null)return null;const y=n.blockBoundary[t];if(n.compression!=="jpg"||s>y.minCol&&s<y.maxCol&&e>y.minRow&&e<y.maxRow)return m;const{origin:g,blockWidth:p,blockHeight:d}=n,{x,y:w}=this.getPyramidPixelSize(t),b=Math.round((a.xmin-g.x)/x)%p,T=Math.round((a.xmax-g.x)/x)%p||p,v=Math.round((g.y-a.ymax)/w)%d,S=Math.round((g.y-a.ymin)/w)%d||d,M=s===y.minCol?b:0,_=e===y.minRow?v:0,k=s===y.maxCol?T:p,F=e===y.maxRow?S:d;return Ni(m,{x:M,y:_},{width:k-M,height:F-_}),m}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const i=this._slices[s].multidimensionalDefinition;if(i.length===e.length&&!i.some(n=>{const a=e.find(r=>n.variableName===r.variableName&&r.dimensionName===n.dimensionName);return a?(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0])!==(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(a=>a.data?.statistics),i=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(a=>a.data?.histograms),n=await Promise.all([s,i]);return n[0]&&n[0].forEach(a=>{a.avg=a.mean,a.stddev=a.standardDeviation}),n[1]?.[0]?.counts?.length||(n[1]=null),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let i=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let a=n-i+this._levelOffset;const r=s.srcLocation;for(;a>=0;){try{if(await this._tilemapCache.fetchAvailability(a,s.row,s.col,e)==="available")break}catch{}if(a--,i++,s=this.identifyPixelLocation(r,i,e.datumTransformation),s===null)return null}return a===-1||s==null?null:i}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const r=e.fullExtent||e.extent,o=Math.ceil((r.xmax-r.xmin)/e.pixelSizeX-.1),l=Math.ceil((r.ymax-r.ymin)/e.pixelSizeY-.1),c=H.fromJSON(e.spatialReference||r.spatialReference),u=new A({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new ve({width:o,height:l,bandCount:3,extent:L.fromJSON(r),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,i=ri(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),n=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(r=>r.data?.slices).catch(()=>null):null,a=await Promise.all([i,n]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,i=.5/t.width*s.x,{lods:n}=e,a=e.lodAt(Math.max.apply(null,n.map(h=>h.level))),r=e.lodAt(Math.min.apply(null,n.map(h=>h.level))),{tileType:o}=this;if(o==="Map")return this._levelOffset=n[0].level,[a,r];if(o==="Raster")return[n.find(h=>h.resolution===s.x)??a,r];const{minScale:l,maxScale:c}=this.sourceJSON;let u=a;c>0&&(u=n.find(h=>Math.abs(h.scale-c)<i),u||(u=n.filter(h=>h.scale>c).sort((h,m)=>h.scale>m.scale?1:-1)[0]??a));let f=r;return l>0&&(f=n.find(h=>Math.abs(h.scale-l)<i)??r,this._levelOffset=f.level-r.level),[u,f]}};function ds(t,e){if(!t)return null;const{minScale:s,maxScale:i,minLOD:n,maxLOD:a}=e;if(n!=null&&a!=null)return te.fromJSON({...t,lods:t.lods.filter(({level:r})=>r!=null&&r>=n&&r<=a)});if(s!==0&&i!==0){const r=c=>Math.round(1e4*c)/1e4,o=s?r(s):1/0,l=i?r(i):-1/0;return te.fromJSON({...t,lods:t.lods.filter(c=>{const u=r(c.scale);return u<=o&&u>=l})})}return te.fromJSON(t)}function ys(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&s?.wkid&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Li,t.extent=t.transform.forwardTransform(e))}I([R({type:String,json:{write:!0}})],me.prototype,"datasetFormat",void 0),I([R()],me.prototype,"tileType",void 0),me=I([K("esri.layers.support.rasterDatasets.ImageServerRaster")],me);const gs=me,Y=new Map;Y.set("Int8","s8"),Y.set("UInt8","u8"),Y.set("Int16","s16"),Y.set("UInt16","u16"),Y.set("Int32","s32"),Y.set("UInt32","u32"),Y.set("Float32","f32"),Y.set("Float64","f32"),Y.set("Double64","f32");const ee=new Map;ee.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),ee.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),ee.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),ee.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let ce=class extends oe{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(t){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:i,files:n}=this._parseHeader(s.data),{skipMapInfo:a,skipExtensions:r=[]}=this.ioConfig;if(!r.includes("aux.xml")&&!a){const d=await this._fetchAuxiliaryData(t);d!=null&&(i.statistics=d.statistics??i.statistics,i.histograms=d.histograms,d.histograms&&i.statistics==null&&(i.statistics=ze(d.histograms)))}a&&this.updateImageSpaceRasterInfo(i),this._set("rasterInfo",i),this._files=n;const o=await this.request(n.index,{responseType:"array-buffer",signal:e});this._storageIndex=xs(o.data);const{blockWidth:l,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:h}=this.rasterInfo,m=[],y=this._getBandSegmentCount();let g=0,p=-1;for(;g<this._storageIndex.length;){p++;const d=Math.ceil(f/l/u**p)-1,x=Math.ceil(h/c/u**p)-1;g+=(d+1)*(x+1)*y*4,m.push({maxRow:x,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=m,p>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=p),this.updateTileInfo()}async fetchRawTile(t,e,s,i={}){const{blockWidth:n,blockHeight:a,blockBoundary:r}=this.rasterInfo.storageInfo,o=r[t];if(!o||o.maxRow<e||o.maxCol<s||o.minRow>e||o.minCol>s)return null;const{bandCount:l,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:f,actualTileHeight:h}=this._getTileLocation(t,e,s);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const F=new Uint8Array(n*a);return new q({width:n,height:a,pixels:void 0,mask:F,validPixelCount:0})}const{bandIds:m}=this.ioConfig,y=this._getBandSegmentCount(),g=[];let p=0;for(p=0;p<y;p++)m&&!m.includes(p)||g.push(this.request(this._files.data,{range:{from:u[p].from,to:u[p].to},responseType:"array-buffer",signal:i.signal}));const d=await Promise.all(g),x=d.map(F=>F.data.byteLength).reduce((F,P)=>F+P),w=new Uint8Array(x),b=[];let T=0;for(p=0;p<y;p++)b.push(T),w.set(new Uint8Array(d[p].data),T),T+=d[p].data.byteLength;const v=ee.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(w.buffer,{width:n,height:a,format:v,planes:m?.length||l,offsets:b,pixelType:c});if(S==null)return null;let{noDataValue:M}=this.rasterInfo;if(M!=null&&v!=="lerc"&&!S.mask&&(M=M[0],M!=null)){const F=S.width*S.height,P=new Uint8Array(F);if(Math.abs(M)>1e24)for(p=0;p<F;p++)Math.abs((S.pixels[0][p]-M)/M)>1e-6&&(P[p]=1);else for(p=0;p<F;p++)S.pixels[0][p]!==M&&(P[p]=1);S.mask=P}let _=0,k=0;if(f!==n||h!==a){let F=S.mask;if(F)for(p=0;p<a;p++)if(k=p*n,p<h)for(_=f;_<n;_++)F[k+_]=0;else for(_=0;_<n;_++)F[k+_]=0;else for(F=new Uint8Array(n*a),S.mask=F,p=0;p<h;p++)for(k=p*n,_=0;_<f;_++)F[k+_]=1}return S}_getBandSegmentCount(){return ee.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:i,blockHeight:n,pyramidScalingFactor:a}=this.rasterInfo.storageInfo,{width:r,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,f,h=0,m=0;for(f=0;f<t;f++)m=a**f,c=Math.ceil(r/i/m),u=Math.ceil(o/n/m),h+=c*u;m=a**t,c=Math.ceil(r/i/m),u=Math.ceil(o/n/m),h+=e*c+s,h*=4*l;const y=this._storageIndex.subarray(h,h+4*l);let g=0,p=0;const d=[];for(let x=0;x<l;x++)g=y[4*x]*2**32+y[4*x+1],p=g+y[4*x+2]*2**32+y[4*x+3],d.push({from:g,to:p});return{ranges:d,actualTileWidth:s<c-1?i:Math.ceil(r/m)-i*(c-1),actualTileHeight:e<u-1?n:Math.ceil(o/m)-n*(u-1)}}_parseHeader(t){const e=j(t,"MRF_META/Raster");if(!e)throw new O("mrf:open","not a valid MRF format");const s=j(e,"Size"),i=parseInt(s.getAttribute("x"),10),n=parseInt(s.getAttribute("y"),10),a=parseInt(s.getAttribute("c"),10),r=(X(e,"Compression")||"none").toLowerCase();if(!ee.has(r))throw new O("mrf:open","currently does not support compression "+r);const o=X(e,"DataType")||"UInt8",l=Y.get(o);if(l==null)throw new O("mrf:open","currently does not support pixel type "+o);const c=j(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),f=parseInt(c.getAttribute("y"),10),h=j(e,"DataValues");let m,y;if(h&&(y=h.getAttribute("NoData"),y!=null&&(m=y.trim().split(" ").map(F=>parseFloat(F)))),j(t,"MRF_META/CachedSource"))throw new O("mrf:open","currently does not support MRF referencing other data files");const g=j(t,"MRF_META/GeoTags"),p=j(g,"BoundingBox");let d,x=!1;if(p!=null){const F=parseFloat(p.getAttribute("minx")),P=parseFloat(p.getAttribute("miny")),C=parseFloat(p.getAttribute("maxx")),$=parseFloat(p.getAttribute("maxy")),D=X(g,"Projection")||"";let N=H.WGS84;if(D!=="LOCAL_CS[]")if(D.toLowerCase().startsWith("epsg:")){const B=Number(D.slice(5));isNaN(B)||B===0||(N=new H({wkid:B}))}else N=Se(D)??H.WGS84;else x=!0,N=new H({wkid:3857});d=new L(F,P,C,$),d.spatialReference=N}else x=!0,d=new L({xmin:-.5,ymin:.5-n,xmax:i-.5,ymax:.5,spatialReference:new H({wkid:3857})});const w=j(t,"MRF_META/Rsets"),b=parseInt(w?.getAttribute("scale")||"2",10),T=d.spatialReference,v=new Re({origin:new A({x:d.xmin,y:d.ymax,spatialReference:T}),blockWidth:u,blockHeight:f,pyramidBlockWidth:u,pyramidBlockHeight:f,compression:r,pyramidScalingFactor:b}),S=new A({x:d.width/i,y:d.height/n,spatialReference:T}),M=new ve({width:i,height:n,extent:d,isPseudoSpatialReference:x,spatialReference:T,bandCount:a,pixelType:l,pixelSize:S,noDataValue:m,storageInfo:v}),_=X(t,"datafile"),k=X(t,"IndexFile");return{rasterInfo:M,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:_||this.url.replace(".mrf",ee.get(r).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ue(e)}catch{return null}}};function xs(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,i,n,a,r;if(yi){for(s=new Uint8Array(t),n=new ArrayBuffer(t.byteLength),i=new Uint8Array(n),a=0;a<t.byteLength/4;a++)for(r=0;r<4;r++)i[4*a+r]=s[4*a+3-r];e=new Uint32Array(n)}else e=new Uint32Array(t);return e}I([R()],ce.prototype,"_files",void 0),I([R()],ce.prototype,"_storageIndex",void 0),I([R({type:String,json:{write:!0}})],ce.prototype,"datasetFormat",void 0),ce=I([K("esri.layers.support.rasterDatasets.MRFRaster")],ce);const ws=ce;function Is(t){const e=t.fields,s=t.records,i=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",n=[{name:i,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),a=n.map(c=>c.name),r=[];let o=0,l=0;return s.forEach(c=>{const u={};for(u[i]=o++,l=1;l<a.length;l++)u[a[l]]=c[l-1];r.push({attributes:u})}),{displayFieldName:"",fields:n,features:r}}class bs{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),i=3&s.getUint8(0);if(i!==3)return{header:{version:i},recordSet:null};const n=s.getUint32(4,!0),a=s.getUint16(8,!0),r=s.getUint16(10,!0),o={version:i,recordCount:n,headerByteCount:a,recordByteCount:r};let l=32;const c=[],u=[];let f;if(i===3){for(;s.getUint8(l)!==13;)f=String.fromCharCode(s.getUint8(l+11)).trim(),c.push({name:et(new Uint8Array(e,l,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(l+16)}),l+=32;if(l+=1,c.length>0)for(;u.length<n&&e.byteLength-l>r;){const h=[];s.getUint8(l)===32?(l+=1,c.forEach(m=>{if(m.type==="C")h.push(et(new Uint8Array(e,l,m.length)).trim());else if(m.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,l,m.length)).trim(),10));else if(m.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,l,m.length)).trim()));else if(m.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(e,l,m.length)).trim();h.push(new Date(parseInt(y.substring(0,4),10),parseInt(y.substring(4,6),10)-1,parseInt(y.substring(6,8),10)))}l+=m.length}),u.push(h)):l+=r}}return{header:o,fields:c,records:u,recordSet:Is({fields:c,records:u})}}}const Be=(t,e)=>t.get(e)?.values,pe=(t,e)=>t.get(e)?.values?.[0];let ne=class extends oe{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(t){await this.init();const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new O("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:n,isBigTiff:a}=gi(s),r=[];await this._readIFDs(r,s,i,n,0,a?8:4,e);const{imageInfo:o,rasterInfo:l}=Rs(r),c=xi(r),u=wi(r);if(this._headerInfo={littleEndian:i,isBigTiff:a,ifds:r,pyramidIFDs:c,maskIFDs:u,...o},this._set("rasterInfo",l),!o.isSupported)throw new O("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new O("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");l.isPseudoSpatialReference&&ae.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const f=r[0].get("PREDICTOR")?.values?.[0];if(r[0].get("SAMPLEFORMAT")?.values?.[0]===3&&f===2)throw new O("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:m,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!m){const g=await this._fetchAuxiliaryMetaData(t);g!=null&&vs(g,l)}y.includes("vat.dbf")||l.bandCount!==1||l.pixelType!=="u8"||m||(l.attributeTable=await this._fetchAuxiliaryTable(t),l.attributeTable!=null&&(l.keyProperties.DataType="thematic")),m&&this.updateImageSpaceRasterInfo(l),this.updateTileInfo()}async fetchRawTile(t,e,s,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,s))return null;const n=await this._fetchRawTiffTile(t,e,s,!1,i);if(n!=null&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(t,e,s,!0,i);a!=null&&a.pixels[0]instanceof Uint8Array&&(n.mask=a.pixels[0])}return n}async _readIFDs(t,e,s,i,n,a=4,r){if(!i)return null;(i>=e.byteLength||i<0)&&(e=(await this.request(this.url,{range:{from:i+n,to:i+n+this._bufferSize},responseType:"array-buffer",signal:r})).data,n=i+n,i=0);const o=await this._readIFD(e,s,i,n,de.tiffTags,a,r);if(t.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(t,e,s,o.nextIFD-n,n,a,r)}async _readIFD(t,e,s,i,n=de.tiffTags,a=4,r){if(!t)return null;const o=Ii(t,e,s,i,n,a);if(o.success){const l=[];if(o.ifd?.forEach(c=>{c.values||l.push(c)}),l.length>0){const c=l.map(f=>f.offlineOffsetSize).filter(Pe),u=Math.min.apply(null,c.map(f=>f[0]));if(Math.min.apply(null,c.map(f=>f[0]+f[1]))-u<=this._bufferSize){const{data:f}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:r});t=f,i=u,l.forEach(h=>bi(t,e,h,i))}}if(o.ifd?.has("GEOKEYDIRECTORY")){const c=o.ifd.get("GEOKEYDIRECTORY"),u=c?.values;if(u&&u.length>4){const f=u[0]+"."+u[1]+"."+u[2],h=await this._readIFD(t,e,c.valueOffset+6-i,i,de.geoKeys,2,r);c.data=h.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[f]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:i,to:i+o.requiredBufferSize+4},responseType:"array-buffer",signal:r})).data).byteLength<o.requiredBufferSize?null:this._readIFD(t,e,0,i,de.tiffTags,4,r)}async _fetchRawTiffTile(t,e,s,i,n={}){const a=this._getTileLocation(t,e,s,i);if(!a)return null;const{ranges:r,actualTileWidth:o,actualTileHeight:l,ifd:c}=a,u=r.map(v=>this.request(this.url,{range:v,responseType:"array-buffer",signal:n.signal})),f=await Promise.all(u),h=f.map(v=>v.data.byteLength).reduce((v,S)=>v+S),m=f.length===1?f[0].data:new ArrayBuffer(h),y=[0],g=[0];if(f.length>1){const v=new Uint8Array(m);for(let S=0,M=0;S<f.length;S++){const _=f[S].data;v.set(new Uint8Array(_),M),y[S]=M,M+=_.byteLength,g[S]=_.byteLength}}const{blockWidth:p,blockHeight:d}=this.getBlockWidthHeight(t),x=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:g},width:p,height:d,planes:null,pixelType:null});if(x==null)return null;let w,b,T;if(o!==p||l!==d){let v=x.mask;if(v)for(w=0;w<d;w++)if(T=w*p,w<l)for(b=o;b<p;b++)v[T+b]=0;else for(b=0;b<p;b++)v[T+b]=0;else for(v=new Uint8Array(p*d),x.mask=v,w=0;w<l;w++)for(T=w*p,b=0;b<o;b++)v[T+b]=1}return x}_getTileLocation(t,e,s,i=!1){const{firstPyramidLevel:n,blockBoundary:a}=this.rasterInfo.storageInfo,r=t===0?0:t-(n-1),{_headerInfo:o}=this;if(!o)return null;const l=i?o.maskIFDs[r]:r===0?o?.ifds[0]:o?.pyramidIFDs[r-1];if(!l)return null;const c=Ri(l,o),u=Be(l,"TILEOFFSETS");if(u===void 0)return null;const f=Be(l,"TILEBYTECOUNTS"),{minRow:h,minCol:m,maxRow:y,maxCol:g}=a[r];if(e>y||s>g||e<h||s<m)return null;const p=pe(l,"IMAGEWIDTH"),d=pe(l,"IMAGELENGTH"),x=pe(l,"TILEWIDTH"),w=pe(l,"TILELENGTH"),b=[];if(c){const{bandCount:T}=this.rasterInfo;for(let v=0;v<T;v++){const S=v*(y+1)*(g+1)+e*(g+1)+s;b[v]={from:u[S],to:u[S]+f[S]-1}}}else{const T=e*(g+1)+s;b.push({from:u[T],to:u[T]+f[T]-1})}for(let T=0;T<b.length;T++)if(b[T].from==null||!b[T].to||b[T].to<0)return null;return{ranges:b,ifd:l,actualTileWidth:s===g&&p%x||x,actualTileHeight:e===y&&d%w||w}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ue(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),s=bs.parse(e);return s?.recordSet?We.fromJSON(s.recordSet):null}catch{return null}}};function Rs(t){const e=vi(t),{width:s,height:i,tileWidth:n,tileHeight:a,planes:r,pixelType:o,compression:l,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:f,pyramidBlockHeight:h,pyramidResolutions:m,tileBoundary:y,affine:g,metadata:p}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let x=Se(d),w=!!e.isPseudoGeographic;x==null&&(w=!0,x=new H({wkid:3857}));const b=new L({...e.extent,spatialReference:x}),T=new A(b?{x:b.xmin,y:b.ymax,spatialReference:x}:{x:0,y:0}),v=new Re({blockWidth:n,blockHeight:a,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:l,origin:T,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:m,blockBoundary:y}),S=new A({x:(b.xmax-b.xmin)/s,y:(b.ymax-b.ymin)/i,spatialReference:x}),M=p?{BandProperties:p.bandProperties,DataType:p.dataType}:{};let _=null;const k=pe(t[0],"PHOTOMETRICINTERPRETATION"),F=Be(t[0],"COLORMAP");if(k<=3&&F?.length>3&&F.length%3==0){_=[];const C=F.length/3;for(let $=0;$<C;$++)_.push([$,F[$]>>>8,F[$+C]>>>8,F[$+2*C]>>>8])}const P=new ve({width:s,height:i,bandCount:r,pixelType:o,pixelSize:S,storageInfo:v,spatialReference:x,isPseudoSpatialReference:w,keyProperties:M,extent:b,colormap:_,statistics:p?p.statistics:null});if(g?.length&&(P.nativeExtent=new L({xmin:-.5,ymin:.5-i,xmax:s-.5,ymax:.5,spatialReference:x}),P.transform=new Ge({polynomialOrder:1,forwardCoefficients:[g[2]+g[0]/2,g[5]-g[3]/2,g[0],g[3],-g[1],-g[4]]}),P.extent=P.transform.forwardTransform(P.nativeExtent),P.pixelSize=new A({x:(b.xmax-b.xmin)/s,y:(b.ymax-b.ymin)/i,spatialReference:x}),v.origin.x=-.5,v.origin.y=.5),m){const{x:C,y:$}=P.pixelSize;m.forEach(D=>{D.x*=C,D.y*=$})}return{imageInfo:e,rasterInfo:P}}function vs(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=ze(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new A({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}I([R()],ne.prototype,"_files",void 0),I([R()],ne.prototype,"_headerInfo",void 0),I([R()],ne.prototype,"_bufferSize",void 0),I([R({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),ne=I([K("esri.layers.support.rasterDatasets.TIFFRaster")],ne);const Ss=ne,z=new Map;z.set("MRF",{desc:"Meta Raster Format",constructor:ws}),z.set("TIFF",{desc:"GeoTIFF",constructor:Ss}),z.set("RasterTileServer",{desc:"Raster Tile Server",constructor:gs}),z.set("JPG",{desc:"JPG Raster Format",constructor:we}),z.set("PNG",{desc:"PNG Raster Format",constructor:we}),z.set("GIF",{desc:"GIF Raster Format",constructor:we}),z.set("BMP",{desc:"BMP Raster Format",constructor:we}),z.set("CovJSON",{desc:"COVJSON Raster Format",constructor:hs}),z.set("MEMORY",{desc:"In Memory Raster Format",constructor:je});class Oe{static get supportedFormats(){const e=new Set;return z.forEach((s,i)=>e.add(i)),e}static async open(e){const{url:s,ioConfig:i,source:n,sourceJSON:a}=e;let r=e.datasetFormat??i?.datasetFormat;r==null&&(s.includes(".")?r=s.slice(s.lastIndexOf(".")+1).toUpperCase():n?.type?.toLowerCase()==="coverage"?r="CovJSON":n?.extent&&n.pixelblocks&&(r="MEMORY")),r==="OVR"||r==="TIF"?r="TIFF":r==="JPG"||r==="JPEG"||r==="JFIF"?r="JPG":r==="COVJSON"&&(r="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const o={url:s,source:n,sourceJSON:a,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(o).forEach(f=>{o[f]==null&&delete o[f]}),r){if(!this.supportedFormats.has(r))throw new O("rasterfactory:open","not a supported format "+r);if(r==="CRF")throw new O("rasterfactory:open",`cannot open raster: ${s}`);const f=new(z.get(r)).constructor(o);return await f.open({signal:e.signal}),f}const l=Array.from(z.keys()).filter(f=>f!=="CovJSON"&&f!=="Memory");let c=0;const u=()=>{if(r=l[c++],!r||r==="CRF")return null;const f=new(z.get(r)).constructor(o);return f.open({signal:e.signal}).then(()=>f).catch(()=>u())};return u()}static register(e,s,i){z.has(e.toUpperCase())||z.set(e.toUpperCase(),{desc:s,constructor:i})}}let E=class extends Et(Bt(zi(Wi(Vt(rs(ji(qt(Gi(Ut(Jt(jt))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=At(async(e,s,i)=>{const{save:n,saveAs:a}=await Ae(()=>import("./imageryUtils.bc167899.js"),["assets/imageryUtils.bc167899.js","assets/utils.a325433b.js","assets/index.7eb0daf2.js","assets/index.d3b4073e.css","assets/originUtils.4db9de46.js","assets/multiOriginJSONSupportUtils.e5f3496a.js","assets/jsonContext.a8ec6dbb.js","assets/portalItemUtils.761d02ba.js","assets/saveAPIKeyUtils.47a3a270.js","assets/saveUtils.056b2dea.js"]);switch(e){case ge.SAVE:return n(this,s);case ge.SAVE_AS:return a(this,i,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(Lt).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[new ue({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new ue({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],e=this.raster?.rasterInfo??this.serviceRasterInfo,s=e?.attributeTable,i=s!=null?s.fields:null,n="Raster.";if(i){const o=i.filter(l=>l.type!=="oid"&&l.name.toLowerCase()!=="value").map(l=>{const c=l.clone();return c.name=n+l.name,c});t.push(...o)}const a=e?.dataType,r=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&r!=null){const o=r.variables[0].unit?.trim(),l="Magnitude"+(o?` (${o})`:"");t.push(new ue({name:"Raster.Magnitude",alias:l,domain:null,editable:!1,type:"double"})),t.push(new ue({name:"Raster.Direction",alias:"Direction (\xB0)",domain:null,editable:!1,type:"double"}))}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=new Set(e.map(({name:i})=>i).filter(i=>i.toLowerCase()!=="raster.servicepixelvalue.raw"));return qi({fields:e,title:this.title},{...t,visibleFieldNames:s})}async generateRasterInfo(t,e){if(t=Je($e,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(t,e);return s}catch(s){throw s instanceof O?s:new O("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(ge.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(ge.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const i=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new O("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${i}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function";else{const{url:i,rasterFunction:n,source:a}=this;if(!i&&!a)throw new O("imagery-tile-layer:open","missing url or source parameter");a?await this._openFromSource(a,t):n?await this._openFromUrlWithRasterFunction(i,n,t):await this._openFromUrl(i,t)}const s=this.raster.rasterInfo;if(!s)throw new O("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(Ht(()=>this.customParameters,i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const i=[t];e&&Hi(e.toJSON(),i);const n=await Promise.all(i.map(r=>Oe.open({url:r,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),a=n.findIndex(r=>r==null);if(a>-1)throw new O("imagery-tile-layer:open",`cannot open raster: ${i[a]}`);return this._primaryRasters=n,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await Oe.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new O("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){const s="the tiled imagery data source is not supported",i=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!i)throw new O("imagery-tile-layer:open",s);i==="MEMORY"&&(t={extent:t.extent,pixelBlocks:[t.pixelBlock]});const n=await Oe.open({url:"",source:t,datasetFormat:i,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(n==null)throw new O("imagery-tile-layer:open",s);this._primaryRasters=[n],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=n}async _openFunctionRaster(t,e){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(a=>s[a.url]=a);const i=dt(t.functionDefinition?.toJSON()??t.toJSON(),s),n=new yt({rasterFunction:i});return await n.open(e),n}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof O&&ae.getLogger(this).error("imagery-tile-layer:open",s.message),ae.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};I([R({clonable:!1})],E.prototype,"_primaryRasters",void 0),I([R({type:[zt],json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.bandIds?.join(",")!=="0,1,2"}}}}})],E.prototype,"bandIds",void 0),I([R({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Wt(ai)],E.prototype,"interpolation",void 0),I([R(oi)],E.prototype,"legendEnabled",void 0),I([R({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],E.prototype,"isReference",void 0),I([R({type:["show","hide"]})],E.prototype,"listMode",void 0),I([R({json:{read:!0,write:!0}})],E.prototype,"blendMode",void 0),I([R()],E.prototype,"sourceJSON",void 0),I([R({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],E.prototype,"version",void 0),I([R({readOnly:!0,json:{read:!1}})],E.prototype,"type",void 0),I([R({type:["ArcGISTiledImageServiceLayer"]})],E.prototype,"operationalLayerType",void 0),I([R({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],E.prototype,"popupEnabled",void 0),I([R({type:Gt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],E.prototype,"popupTemplate",void 0),I([R({readOnly:!0})],E.prototype,"defaultPopupTemplate",null),I([R({readOnly:!0,type:[ue]})],E.prototype,"fields",void 0),I([R({readOnly:!0,type:[ue]})],E.prototype,"rasterFields",null),I([R({constructOnly:!0})],E.prototype,"source",void 0),E=I([K("esri.layers.ImageryTileLayer")],E);const fn=E;export{fn as default};
