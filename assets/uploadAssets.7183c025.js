import{d as E,bp as X,cE as Y,kt as N,af as A,ku as _,e7 as d,U as f,F as u,fv as Z,j6 as ss,be as es,cM as ts,j5 as os,n as rs}from"./index.7eb0daf2.js";import{h as ns,c as as,i as S,o as k,d as is}from"./MeshTransform.97c24ed3.js";import{r as cs,n as ls,a as us,d as ps,c as x,l as ms,t as fs,u as ds,p as gs}from"./uploadAssetErrors.3a5c68ef.js";import{s as hs,u as U,i as ws}from"./infoFor3D.8ecd2df8.js";import"./mat4f64.a89cc140.js";import"./quat.2c7c64ba.js";import"./mat3f64.4564d6a3.js";import"./quatf64.bcd5b590.js";import"./vec42.faaf2b1c.js";import"./vec4f64.7b667e97.js";const $={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function g(t,e=o=>{},s){return new ys(t,e,s)}class ys{constructor(e,s=r=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let r=0;r<e;r++){const n=r,a=1/e;this._weights[n]=a,this._progressMap.set(n,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,o]of this._progressMap.entries())e+=o*this._weights[s];if(e===1&&E("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,r]of this._timingsMap){const n=Math.round(r.end-r.start)/1e3,a=Math.round(n/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:n,relativeTime:a})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),E("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const r=X(this._timingsMap,e,()=>({start:o,end:0}));s===1&&(r.end=o)}this.emitProgress()}simulate(e,s){return D(o=>this.setProgress(e,o),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}}function D(t=s=>{},e=Ms){const s=performance.now();t(0);const o=setInterval(()=>{const r=performance.now()-s,n=1-Math.exp(-r/e);t(n)},$s);return Y(()=>{clearInterval(o),t(1)})}function Ps(t,e=bs){return N(_(t*B/e))}function Ts(t,e=As){return N(_(t*B/e))}const bs=10,As=10,B=8e-6,$s=A(50),Ms=A(1e3),O=1e6,I=20*O,js=2e9,Fs=3;async function vs({data:t,name:e,description:s},o,r){let n=null;try{const a=d(o,"uploads"),i=d(a,"info"),{data:c}=await f(i,{query:{f:"json"},responseType:"json"});u(r);const l=Z(o),m=c.maxUploadFileSize*O,h=l?js:m,b=l?Math.min(I,m):I;if(t.size>h)throw new Error("Data too large");const L=d(a,"register"),{data:M}=await f(L,{query:{f:"json",itemName:Es(e),description:s},responseType:"json",method:"post"});if(u(r),!M.success)throw new Error("Registration failed");const{itemID:H}=M.item;n=d(a,H);const G=d(n,"uploadPart"),j=Math.ceil(t.size/b),w=new Array;for(let p=0;p<j;++p)w.push(t.slice(p*b,Math.min((p+1)*b,t.size)));const y=w.slice().reverse(),F=new Array,J=g(j,r?.onProgress,"uploadItem"),W=async()=>{for(;y.length!==0;){const p=w.length-y.length,P=y.pop(),T=new FormData,V=J.simulate(p,Ps(P.size));try{T.append("f","json"),T.append("file",P),T.append("partId",`${p}`);const{data:Q}=await f(G,{timeout:0,body:T,responseType:"json",method:"post"});if(u(r),!Q.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let p=0;p<Fs&&y.length!==0;++p)F.push(W());await Promise.all(F);const K=d(n,"commit"),{data:v}=await f(K,{query:{f:"json",parts:w.map((p,P)=>P).join(",")},responseType:"json",method:"post"});if(u(r),!v.success)throw new Error("Commit failed");return v.item}catch(a){if(n!=null){const i=d(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Es(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function ne(t,e,s){const o=t.length;if(!o)return s?.onProgress?.(1),[];const r=g(o,s?.onProgress,"uploadAssets");return Promise.all(t.map((n,a)=>Is(n,e,{...s,onProgress:r.makeOnProgress(a)})))}async function Is(t,{layer:e,ongoingUploads:s},o){const r=s.get(t);if(r)return r;if(!Js(e))throw new cs;if(Ns(t,e))return o?.onProgress?.(1),t;const n=_s(t,e,o);s.set(t,n);try{await n}finally{s.delete(t)}return t}function Ns(t,e){const{parsedUrl:s}=e;return s!=null&&t.metadata.externalSources.some(o=>ns(o,s))}async function _s(t,e,s){const{metadata:o}=t,{displaySource:r}=o,n=C(r?.source,e),a=!!n,i=o.externalSources.length>0,c=a?Ss(n,e,s):i?ks(t,e,s):xs(t,e,s),l=await c;return u(s),t.addExternalSources([l]),t}async function Ss(t,e,s){return{source:await q(t,e,s),original:!0}}async function ks(t,e,s){const o=z(e),{externalSources:r}=t.metadata,n=Ds(r,e);if(!n)throw new ls;const a=g($.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await q(n,e,{onProgress:a.makeOnProgress("uploadEditSource")});t.addExternalSources([{source:i,original:!0}]);const c=n.reduce((m,{asset:h})=>h instanceof File?m+h.size:m,0),l=a.simulate("serviceAssetsToGlb",Ts(c));try{return{source:await Ls(i,e,o)}}finally{l.remove()}}async function xs(t,e,s){const o=g($.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),r=Us(t,e,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await R([r],e,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:t.extent.clone(),original:!0}}async function Us(t,e,s){const o=z(e),r=await t.load(s),n=await r.toBinaryGLTF({origin:r.origin,signal:s?.signal,ignoreLocalTransform:!0});return u(s),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${ss()}.glb`,assetType:o}}function Ds(t,e){for(const s of t){const o=C(s.source,e);if(o)return o}return null}function C(t,e){if(!t)return null;const{infoFor3D:{supportedFormats:s,editFormats:o}}=e,r=is(t),n=new Array;let a=!1;for(let i=0;i<r.length;++i){const c=Bs(r[i],s);if(!c)return null;o.includes(c.assetType)&&(a=!0),n.push(c)}return a?n:null}function Bs(t,e){const s=as(t,e);return s?{asset:t,assetType:s}:null}async function q(t,e,s){return R(t.map(o=>Os(o,s)),e,s)}async function R(t,e,s){const o=g($.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),r=await qs(t,e,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});u(s);const n=r.map(({item:i})=>i),{uploadResults:a}=await Rs(n,e,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return u(s),t.map((i,c)=>zs(r[c],a[c],e))}async function Os(t,e){const{asset:s,assetType:o}=t;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const r=await s.toBlob(e);return u(e),{blob:r,assetName:s.assetName,assetType:o}}async function Cs(t,e,s){const{blob:o,assetType:r,assetName:n}=t;let a=null;try{const i=await vs({data:o,name:n},e.url,s);u(s),a={assetType:r,assetUploadId:i.itemID}}catch(i){ts(i),Ws().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!a){const i=await os(o);if(u(s),!i.isBase64)throw new ds;a={assetType:r,assetData:i.data}}if(!a)throw new gs;return{item:a,assetName:n}}function qs(t,e,s){const o=g(t.length,s?.onProgress,"prepareAssetItems");return Promise.all(t.map(async(r,n)=>{const a=Cs(await r,e,{...s,onProgress:o.makeOnProgress(n)});return u(s),a}))}async function Rs(t,e,s){const o=D(s?.onProgress);try{const r=await f(d(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(u(s),r.data.uploadResults.length!==t.length)throw new us(t.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function zs(t,e,s){const{success:o}=e;if(!o){const{error:l}=e;throw new ps(t.assetName,l)}const{assetHash:r}=e,{assetName:n,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=s,c=hs(a,i);if(!c)throw new x(a);return new S(n,c,[new k(`${s.parsedUrl.path}/assets/${r}`,r)])}async function Ls(t,e,s){const o=t.map(({assetName:l,parts:m})=>({assetName:l,assetHash:m[0].partHash})),r=e.capabilities?.operations.supportsAsyncConvert3D,n={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:r},a=d(e.parsedUrl.path,"convert3D");let i;try{i=(await(r?Gs:Hs)(a,{query:n,responseType:"json",timeout:0})).data}catch{throw new ms}const{supportedFormats:c}=e.infoFor3D;return i.assets.map(l=>{const m=U(l.contentType,c);if(!m)throw new x(m);return new S(l.assetName,l.contentType,[new k(l.assetURL,l.assetHash)])})}function Hs(t,e){return f(t,e)}async function Gs(t,e){const s=(await f(t,e)).data.statusUrl;for(;;){const o=(await f(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await es(Ks)}}function Js(t){return!!t.infoFor3D&&!!t.url}function z(t){const{infoFor3D:e}=t,s=U("model/gltf-binary",e.supportedFormats)??ws("glb",e.supportedFormats);if(!s)throw new fs;return s}function Ws(){return rs.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const Ks=A(1e3);export{ne as uploadAssets};
