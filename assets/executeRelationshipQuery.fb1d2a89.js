import{U as m,fD as p,eh as l}from"./index.7eb0daf2.js";import{t as j}from"./query.702fc5fe.js";import{d as R}from"./FeatureSet.78257171.js";import{d as f}from"./RelationshipQuery.a9d69ee6.js";import"./pbfQueryUtils.52d7ad7f.js";import"./pbf.72af564e.js";import"./OptimizedFeature.32c00f5f.js";import"./OptimizedFeatureSet.6fd3bcb1.js";import"./queryZScale.835a340e.js";function h(r,t){const e=r.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!t?.returnCountOnly?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=p(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function F(r,t,e){const n=await y(r,t,e),o=n.data,s=o.geometryType,a=o.spatialReference,d={};for(const c of o.relatedRecordGroups){const u={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)d[c.objectId]=u;else for(const i of Object.keys(c))i!=="relatedRecords"&&(d[c[i]]=u)}return{...n,data:d}}async function b(r,t,e){const n=await y(r,t,e,{returnCountOnly:!0}),o=n.data,s={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(s[a.objectId]=a.count);return{...n,data:s}}async function y(r,t,e={},n){const o=j({...r.query,f:"json",...n,...h(t,n)});return m(r.path+"/queryRelatedRecords",{...e,query:{...e.query,...o}})}async function C(r,t,e){t=f.from(t);const n=l(r);return F(n,t,e).then(o=>{const s=o.data,a={};return Object.keys(s).forEach(d=>a[d]=R.fromJSON(s[d])),a})}async function J(r,t,e){t=f.from(t);const n=l(r);return b(n,t,{...e}).then(o=>o.data)}export{C as executeRelationshipQuery,J as executeRelationshipQueryForCount};
