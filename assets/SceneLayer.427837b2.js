import{aa as i,ab as s,ac as b,ek as N,dW as D,ec as C,je as re,c7 as U,bK as x,co as ie,cP as G,jn as se,ed as v,da as ae,dH as oe,eR as ne,U as B,e as le,s as d,e7 as pe,$ as X,e5 as de,dw as ue,e8 as V,n as f,cM as ce,c1 as ye,fX as me,d7 as he,fv as k,aj as fe,c8 as Q,eU as A,G as ge,dL as ve,eK as we,ef as be,dJ as Ie}from"./index.7eb0daf2.js";import"./UniqueValueRenderer.8069ab57.js";import{u as Le}from"./jsonUtils.93554317.js";import{S as Fe}from"./MultiOriginJSONSupport.b5976a45.js";import{$ as Se}from"./Mesh.9f387926.js";import{i as _e,m as $e}from"./uploadAssetErrors.3a5c68ef.js";import{i as Te}from"./APIKeyMixin.a389fc6d.js";import{l as je}from"./ArcGISService.c7559039.js";import{e as Oe}from"./CustomParametersMixin.b4d39f07.js";import{F as Ee}from"./EditBusLayer.979b288a.js";import{b as xe}from"./OperationalLayer.33897364.js";import{j as Ae}from"./PortalLayer.5cf51695.js";import{L as Pe,C as J}from"./SceneService.086725df.js";import{f as Re}from"./TemporalLayer.859e579f.js";import{d as K,l as De}from"./TimeInfo.d882fe8e.js";import{s as Ue}from"./associatedFeatureServiceUtils.f808dfcb.js";import{s as qe}from"./capabilities.f230e665.js";import{d as Ne,l as Ce,y as Ge,s as Ve,t as ke}from"./commonProperties.a37169f8.js";import{v as Qe,J as Je}from"./featureLayerUtils.1828d741.js";import{t as Ke,p as ze}from"./FeatureReductionSelection.49649196.js";import{s as Me}from"./fieldProperties.80f53b4c.js";import{Z as He}from"./FieldsIndex.333d0734.js";import{p as Y,a as We,y as Ze,m as Be}from"./I3SLayerDefinitions.39e9ab42.js";import{r as Xe,t as Ye}from"./infoFor3D.8ecd2df8.js";import{C as et,l as z}from"./labelingInfo.41bbc735.js";import{p as tt}from"./LayerFloorInfo.164b006f.js";import{b as rt}from"./fetchService.e99559bf.js";import{j as it}from"./persistable.730ba478.js";import{t as st}from"./styleUtils.f0558e3a.js";import{$ as M,P as at,w as ot}from"./elevationInfoUtils.42c7dcc4.js";import{n as H}from"./styleUtils.7f2b22b0.js";import{p as nt}from"./popupUtils.f17e95f0.js";import{$ as lt}from"./I3SUtil.ba9513ba.js";import{n as pt,p as dt}from"./popupUtils.c8d8e4fb.js";import"./ColorStop.aa8650af.js";import"./diffUtils.080c04bc.js";import"./colorRamps.272b71a1.js";import"./sizeVariableUtils.34255976.js";import"./visualVariableUtils.12ee1cdb.js";import"./jsonUtils.185b82ae.js";import"./defaults.e5a1167a.js";import"./defaultsJSON.ba72df2f.js";import"./LRUCache.6f8863ed.js";import"./Version.856e86b2.js";import"./OverrideHelper.b5d99b26.js";import"./colorUtils.085072a2.js";import"./vec42.faaf2b1c.js";import"./vec4f64.7b667e97.js";import"./utils.dbb84a38.js";import"./quantizationUtils.fe6b1e6e.js";import"./heatmapUtils.b763e953.js";import"./MeshTransform.97c24ed3.js";import"./mat4f64.a89cc140.js";import"./quat.2c7c64ba.js";import"./mat3f64.4564d6a3.js";import"./quatf64.bcd5b590.js";import"./imageUtils.bdf51421.js";import"./MeshVertexAttributes.611e9740.js";import"./MeshLocalVertexSpace.82c9e8da.js";import"./meshVertexSpaceUtils.5f97af5a.js";import"./earcut.dc9d94eb.js";import"./DoubleArray.2bb33e3e.js";import"./Indices.5bfd2621.js";import"./plane.23059d6d.js";import"./deduplicate.a7cfab22.js";import"./projection.6ad549e2.js";import"./spatialReferenceEllipsoidUtils.54dfd023.js";import"./computeTranslationToOriginAndRotation.4860e3ef.js";import"./BufferView.80717d85.js";import"./vec3.5fc4e8fc.js";import"./vec4.2d53fcda.js";import"./vertexSpaceConversion.8ec27d21.js";import"./portalItemUtils.761d02ba.js";import"./originUtils.4db9de46.js";import"./multiOriginJSONSupportUtils.e5f3496a.js";import"./jsonContext.a8ec6dbb.js";import"./resourceUtils.292f7e89.js";import"./resourceUtils.e46436d7.js";import"./saveAPIKeyUtils.47a3a270.js";import"./saveUtils.056b2dea.js";import"./RelationshipQuery.a9d69ee6.js";import"./UnknownTimeZone.4756be49.js";import"./labelUtils.37b9d8d8.js";import"./MD5.f6d873db.js";import"./resourceExtension.70831979.js";import"./sphere.701721ad.js";import"./I3SBinaryReader.79100f56.js";import"./VertexAttribute.53a8dea2.js";import"./floatRGBA.133c49be.js";import"./NormalAttribute.glsl.519bff8e.js";import"./interfaces.98cd2ad6.js";import"./BindType.597c7f67.js";import"./orientedBoundingBox.ee8aaba9.js";function ee({associatedLayer:e,serviceUpdateTimeStamp:t}){const r=e?.editingInfo?.lastEditDate,o=e?.serverGens,n=r!=null,l=t!=null,p=n&&l&&t.lastUpdate!==r.getTime();return n&&(p||!l&&o?.minServerGen!==o?.serverGen)}const ut=e=>{let t=class extends e{constructor(){super(...arguments),this.serviceTimeInfo=null}get timeInfo(){const r=this.associatedLayer?.timeInfo;if(r==null)return null;const o=r.clone();return C(o,this.fieldsIndex),o}set timeInfo(r){C(r,this.fieldsIndex),this._override("timeInfo",r)}get timeExtent(){return this.associatedLayer?.timeExtent}set timeExtent(r){this._override("timeExtent",r)}get timeOffset(){return this.associatedLayer?.timeOffset}set timeOffset(r){this._override("timeOffset",r)}get datesInUnknownTimezone(){return this.associatedLayer?.datesInUnknownTimezone??!1}set datesInUnknownTimezone(r){this._override("datesInUnknownTimezone",r)}async loadTimeInfoFromService(r){const{serviceTimeInfo:o}=this;if(o==null)return;const{startTimeField:n,endTimeField:l}=o;if(n==null&&l==null||ee({associatedLayer:this.associatedLayer,serviceUpdateTimeStamp:this.serviceUpdateTimeStamp}))return;const p=async y=>{let h=null;try{h=(await this.fetchStatistics?.(y,r))?.stats}catch{}if(h==null)return null;const{minTimeStr:I,min:T,maxTimeStr:j,max:O}=h,F=y===n?I??T:j??O;return F!=null?new Date(F):null},[u,c]=await Promise.all([p(n),p(l)]);if(n!=null&&u==null||l!=null&&c==null)return;const m=new N({start:u,end:c});this.setAtOrigin("timeInfo",new K({endField:l,startField:n,fullTimeExtent:m}),"service")}};return i([s({type:K,json:{read:!1,write:!1}})],t.prototype,"timeInfo",null),i([s({type:N,json:{read:!1,write:!1}})],t.prototype,"timeExtent",null),i([s({type:De,json:{read:!1,write:!1}})],t.prototype,"timeOffset",null),i([s({type:Boolean,nonNullable:!0,json:{read:!1,write:!1}})],t.prototype,"datesInUnknownTimezone",null),i([s({type:L,readOnly:!0,json:{read:{source:"timeInfo"}}})],t.prototype,"serviceTimeInfo",void 0),t=i([b("esri.layers.mixins.TemporalSceneLayer")],t),t};let L=class extends D{constructor(){super(...arguments),this.endTimeField=null,this.startTimeField=null}};i([s({type:String})],L.prototype,"endTimeField",void 0),i([s({type:String})],L.prototype,"startTimeField",void 0),L=i([b("esri.layers.mixins.TemporalSceneLayer.SceneServiceTimeInfo")],L);let g=class extends D{constructor(){super(...arguments),this.name=null,this.field=null,this.currentRangeExtent=null,this.fullRangeExtent=null,this.type="rangeInfo"}};i([s({type:String,json:{read:!0,write:!0}})],g.prototype,"name",void 0),i([s({type:String,json:{read:!0,write:!0}})],g.prototype,"field",void 0),i([s({type:[Number],json:{read:!0,write:!0}})],g.prototype,"currentRangeExtent",void 0),i([s({type:[Number],json:{read:!0,write:!0}})],g.prototype,"fullRangeExtent",void 0),i([s({type:["rangeInfo"],readOnly:!0,json:{read:!1,write:!0}})],g.prototype,"type",void 0),g=i([b("esri.layers.support.RangeInfo")],g);var _;let P=_=class extends re(U.ofType(x)){constructor(e){super(e)}clone(){return new _(this.items.map(e=>e.clone()))}write(e,t){return this.toJSON(t)}toJSON(e){const t=e?.layer?.spatialReference;return t?this.toArray().map(r=>{if(!t.equals(r.spatialReference)){if(!ie(r.spatialReference,t))return e?.messages&&e.messages.push(new G("scenefilter:unsupported","Scene filters with incompatible spatial references are not supported",{modification:this,spatialReference:e.layer.spatialReference,context:e})),null;const n=new x;se(r,n,t),r=n}const o=r.toJSON(e);return delete o.spatialReference,o}).filter(r=>r!=null):(e?.messages&&e.messages.push(new G("scenefilter:unsupported","Writing Scene filters without context layer is not supported",{modification:this,spatialReference:e.layer.spatialReference,context:e})),this.toArray().map(r=>r.toJSON(e)))}static fromJSON(e,t){const r=new _;return e.forEach(o=>r.add(x.fromJSON(o,t))),r}};P=_=i([b("esri.layers.support.PolygonCollection")],P);const $=P;var R;let w=R=class extends D{constructor(e){super(e),this.spatialRelationship="disjoint",this.geometries=new $,this._geometriesSource=null}initialize(){this.addHandles(ae(()=>this.geometries,"after-changes",()=>this.geometries=this.geometries,oe))}readGeometries(e,t,r){Array.isArray(e)?this.geometries=$.fromJSON(e,r):this._geometriesSource={url:ne(e,r),context:r}}async loadGeometries(e,t){if(this._geometriesSource==null)return;const{url:r,context:o}=this._geometriesSource,n=await B(r,{responseType:"json",signal:t?.signal}),l=e.toJSON(),p=n.data.map(u=>({...u,spatialReference:l}));this.geometries=$.fromJSON(p,o),this._geometriesSource=null}clone(){const e=new R({geometries:le(this.geometries),spatialRelationship:this.spatialRelationship});return e._geometriesSource=this._geometriesSource,e}};i([s({type:["disjoint","contains"],nonNullable:!0,json:{write:!0}})],w.prototype,"spatialRelationship",void 0),i([s({type:$,nonNullable:!0,json:{write:!0}}),it({origins:["web-scene","portal-item"],type:"resource",prefix:"geometries",contentAddressed:!0})],w.prototype,"geometries",void 0),i([v(["web-scene","portal-item"],"geometries")],w.prototype,"readGeometries",null),w=R=i([b("esri.layers.support.SceneFilter")],w);const ct=w;async function yt({fieldName:e,statisticsInfo:t,errorContext:r,fieldsIndex:o,path:n,customParameters:l,apiKey:p,signal:u}){if(t==null)throw new d(`${r}:no-cached-statistics`,"Cached statistics are not available for this layer");const c=o.get(e);if(c==null)throw new d(`${r}:field-unexisting`,`Field '${e}' does not exist on the layer`);const m=t.find(I=>I.name===c.name);if(m==null)throw new d(`${r}:no-cached-statistics`,"Cached statistics for this attribute are not available");const y=pe(n,m.href),{data:h}=await B(y,{query:{f:"json",...l,token:p},responseType:"json",signal:u});return h}async function mt(e){const t=[];for(const r of e)r.name.toLowerCase().endsWith(".zip")?t.push(ht(r)):t.push(Promise.resolve(r));return(await Promise.all(t)).flat()}async function ht(e){const{BlobReader:t,ZipReader:r,BlobWriter:o}=await X(()=>import("./zipjs-wrapper.45da8d20.js"),[]),n=[];return(await new r(new t(e)).getEntries()).forEach(p=>{if(p.directory||/^__MACOS/i.test(p.filename))return;const u=new o,c=p.getData?.(u).then(m=>new File([m],p.filename));c&&n.push(c)}),Promise.all(n)}const ft=new Set(["3DObject","Point"]),W=Me();let a=class extends ut(Ee(Pe(je(xe(Ae(de(Fe(Oe(Te(ue(Ie))))))))))){constructor(...e){super(...e),this.featureReduction=null,this.rangeInfos=null,this.operationalLayerType="ArcGISSceneServiceLayer",this.type="scene",this.fields=null,this.floorInfo=null,this.outFields=null,this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.excludeObjectIds=new U,this.definitionExpression=null,this.filter=null,this.path=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.priority=null,this.semantic=null,this.cachedDrawingInfo={color:!1},this.popupEnabled=!0,this.popupTemplate=null,this.objectIdField=null,this.globalIdField=null,this._fieldUsageInfo={},this.screenSizePerspectiveEnabled=!0,this.serviceItemId=void 0}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}destroy(){this._set("renderer",null)}getField(e){return this.fieldsIndex.get(e)}getFieldDomain(e,t){const r=this.getFeatureType(t?.feature)?.domains?.[e];return r&&r.type!=="inherited"?r:this.getField(e)?.domain??null}getFeatureType(e){return e&&this.associatedLayer?this.associatedLayer.getFeatureType(e):null}get types(){return this.associatedLayer?.types??[]}get typeIdField(){return this.associatedLayer?.typeIdField??null}get templates(){return this.associatedLayer?.templates??null}get formTemplate(){return this.associatedLayer?.formTemplate??null}get fieldsIndex(){return new He(this.fields)}readNodePages(e,t,r){return t.layerType==="Point"&&(e=t.pointNodePages),e==null||typeof e!="object"?null:Y.fromJSON(e,r)}set elevationInfo(e){this._set("elevationInfo",e),this.loaded&&this._validateElevationInfo()}get effectiveCapabilities(){return this._capabilitiesFromAssociatedFeatureLayer(this.associatedLayer?.effectiveCapabilities)}get effectiveEditingEnabled(){return this.associatedLayer!=null&&Qe(this.associatedLayer)}get geometryType(){return gt[this.profile]||"mesh"}set renderer(e){V(e,this.fieldsIndex),this._set("renderer",e)}readCachedDrawingInfo(e){return e!=null&&typeof e=="object"||(e={}),e.color==null&&(e.color=!1),e}get capabilities(){return this._capabilitiesFromAssociatedFeatureLayer(this.associatedLayer?.capabilities)}_capabilitiesFromAssociatedFeatureLayer(e){e=e??qe;const{query:t,queryRelated:r,editing:{supportsGlobalId:o,supportsRollbackOnFailure:n,supportsUploadWithItemId:l,supportsGeometryUpdate:p,supportsReturnServiceEditsInSourceSpatialReference:u},data:{supportsZ:c,supportsM:m,isVersioned:y,supportsAttachment:h},operations:{supportsEditing:I,supportsAdd:T,supportsUpdate:j,supportsDelete:O,supportsQuery:F,supportsQueryAttachments:q,supportsAsyncConvert3D:te}}=e,S=e.operations.supportsChangeTracking,E=!!this.associatedLayer?.infoFor3D&&H();return{query:t,queryRelated:r,editing:{supportsGlobalId:o,supportsReturnServiceEditsInSourceSpatialReference:u,supportsRollbackOnFailure:n,supportsGeometryUpdate:E&&p,supportsUploadWithItemId:l},data:{supportsAttachment:h,supportsZ:c,supportsM:m,isVersioned:y},operations:{supportsQuery:F,supportsQueryAttachments:q,supportsEditing:I&&S,supportsAdd:E&&T&&S,supportsDelete:E&&O&&S,supportsUpdate:j&&S,supportsAsyncConvert3D:te}}}get editingEnabled(){return this._isOverridden("editingEnabled")?this._get("editingEnabled"):this.associatedLayer?.editingEnabled??!1}set editingEnabled(e){this._overrideIfSome("editingEnabled",e)}get infoFor3D(){return this.associatedLayer?.infoFor3D??null}get relationships(){return this.associatedLayer?.relationships}get defaultPopupTemplate(){return this.associatedLayer||this.attributeStorageInfo?this.createPopupTemplate():null}readObjectIdField(e,t){return!e&&t.fields&&t.fields.some(r=>(r.type==="esriFieldTypeOID"&&(e=r.name),!!e)),e||void 0}readGlobalIdField(e,t){return!e&&t.fields&&t.fields.some(r=>(r.type==="esriFieldTypeGlobalID"&&(e=r.name),!!e)),e||void 0}get displayField(){return this.associatedLayer?.displayField??null}readProfile(e,t){const r=t.store.profile;return r!=null&&Z[r]?Z[r]:(f.getLogger(this).error("Unknown or missing profile",{profile:r,layer:this}),"mesh-pyramids")}get useViewTime(){return this.associatedLayer?.useViewTime??!0}set useViewTime(e){this._override("useViewTime",e)}load(e){return this.addResolvingPromise(this._load(e)),Promise.resolve(this)}async _load(e){const t=e!=null?e.signal:null;await this.loadFromPortal({supportedTypes:["Scene Service"]},e).catch(ce),await this._fetchService(t),await Promise.all([this._fetchIndexAndUpdateExtent(this.nodePages,t),this._setAssociatedFeatureLayer(t),this._loadFilterGeometries()]),this._validateElevationInfo(),this._applyAssociatedLayerOverrides(),this._populateFieldUsageInfo(),await this.loadTimeInfoFromService(e),await st(this,{origin:"service"},t),V(this.renderer,this.fieldsIndex),await this.finishLoadEditablePortalLayer(e)}async beforeSave(){this.filter!=null&&(this.filter=this.filter.clone(),await this.load())}async _loadFilterGeometries(){if(this.filter)try{await this.filter.loadGeometries(this.spatialReference)}catch(e){f.getLogger(this).error("#_loadFilterGeometries()",this,"Failed to load filter geometries. Geometry filter will not be applied for this layer.",{error:e}),this.filter=null}}createQuery(){const e=new ye;return this.geometryType==="mesh"?this.associatedLayer?.infoFor3D&&(e.returnGeometry=!0):(e.returnGeometry=!0,e.returnZ=!0),e.where=this.definitionExpression||"1=1",e.sqlFormat="standard",e.outFields=["*"],e}queryExtent(e,t){return this._getAssociatedLayerForQuery().then(r=>r.queryExtent(e||this.createQuery(),t))}queryFeatureCount(e,t){return this._getAssociatedLayerForQuery().then(r=>r.queryFeatureCount(e||this.createQuery(),t))}queryFeatures(e,t){return this._getAssociatedLayerForQuery().then(r=>r.queryFeatures(e||this.createQuery(),t)).then(r=>{if(r?.features)for(const o of r.features)o.layer=this,o.sourceLayer=this;return r})}async queryRelatedFeatures(e,t){if(await this.load(),!this.associatedLayer)throw new d("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});return this.associatedLayer.queryRelatedFeatures(e,t)}async queryRelatedFeaturesCount(e,t){if(await this.load(),!this.associatedLayer)throw new d("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});return this.associatedLayer.queryRelatedFeaturesCount(e,t)}async queryCachedAttributes(e,t){const r=me(this.fieldsIndex,await pt(this,dt(this)));return lt(this.parsedUrl?.path??"",this.attributeStorageInfo??[],e,t,r,this.apiKey,this.customParameters)}async queryCachedFeature(e,t){const r=await this.queryCachedAttributes(e,[t]);if(!r||r.length===0)throw new d("scenelayer:feature-not-in-cached-data","Feature not found in cached data");const o=new he;return o.attributes=r[0],o.layer=this,o.sourceLayer=this,o}queryObjectIds(e,t){return this._getAssociatedLayerForQuery().then(r=>r.queryObjectIds(e||this.createQuery(),t))}queryAttachments(e,t){return this._getAssociatedLayerForQuery().then(r=>r.queryAttachments(e,t))}getFieldUsageInfo(e){const t={supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1};return this.loaded?this._fieldUsageInfo[e]||t:(f.getLogger(this).error("#getFieldUsageInfo()","Unavailable until layer is loaded"),t)}createPopupTemplate(e){return nt(this,e)}_getAssociatedLayerForQuery(){const e=this.associatedLayer;return e?.loaded?Promise.resolve(e):this._loadAssociatedLayerForQuery()}async _loadAssociatedLayerForQuery(){if(await this.load(),!this.associatedLayer)throw new d("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});try{await this.associatedLayer.load()}catch(e){throw new d("scenelayer:query-not-available","SceneLayer associated feature layer could not be loaded",{layer:this,error:e})}return this.associatedLayer}hasCachedStatistics(e){return this.statisticsInfo!=null&&this.statisticsInfo.some(t=>t.name===e)}async queryCachedStatistics(e,t){return await this.load(t),await this.fetchStatistics(e,t)}async saveAs(e,t){return this._debouncedSaveOperations(J.SAVE_AS,{...t,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"};return this._debouncedSaveOperations(J.SAVE,e)}async applyEdits(e,t){const{applyEdits:r}=await X(()=>import("./editingSupport.b9997e05.js"),["assets/editingSupport.b9997e05.js","assets/index.7eb0daf2.js","assets/index.d3b4073e.css","assets/EditBusLayer.979b288a.js","assets/infoFor3D.8ecd2df8.js"]);let o=t;await this.load();const n=this.associatedLayer;if(!n)throw new d(`${this.type}-layer:not-editable`,"Service is not editable");await n.load();const{globalIdField:l}=n,p=!!n.infoFor3D,u=o?.globalIdUsed??!0;if(p&&l==null)throw new d(`${this.type}-layer:not-editable`,"Valid globalIdField expected on editable SceneLayer");if(p&&!u)throw new d(`${this.type}-layer:globalid-required`,"globalIdUsed must not be false for SceneLayer editing as globalIds are required.");return k(n.url)&&p&&e.deleteFeatures!=null&&l!=null&&(o={...o,globalIdToObjectId:await Je(n,e.deleteFeatures,l)}),r(this,n.source,e,o)}async uploadAssets(e,t){if(await this.load(),this.associatedLayer==null)throw new d(`${this.type}-layer:not-editable`,"Service is not editable");return await this.associatedLayer.load(),this.associatedLayer.uploadAssets(e,t)}on(e,t){return super.on(e,t)}async convertMesh(e,t){const r=y=>{throw f.getLogger(this).error(".convertMesh()",y.message),y};await this.load(),this.infoFor3D||r(new d("invalid:layer","SceneLayer has no capability for mesh conversion"));const o=await this.extractAndFilterFiles(e),n=o.reduce((y,h)=>Xe(this.infoFor3D,h)?y+1:y,0);n===0&&r(new _e),n>1&&r(new $e);const l=this.spatialReference,p=t?.location??new fe({x:0,y:0,z:0,spatialReference:l}),u=p.spatialReference.isGeographic?"local":"georeferenced",c=Se.createWithExternalSource(p,o,{vertexSpace:u}),[m]=await this.uploadAssets([c],t);return m}async extractAndFilterFiles(e){await this.load();const t=this.infoFor3D;return t?(await mt(e)).filter(r=>Ye(t,r)):e}validateLayer(e){if(e.layerType&&!ft.has(e.layerType))throw new d("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new d("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x, 2.x"});if(this.version.major>2)throw new d("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x, 2.x"});function t(r,o){let n=!1,l=!1;if(r==null)n=!0,l=!0;else{const p=o&&o.isGeographic;switch(r){case"east-north-up":case"earth-centered":n=!0,l=p;break;case"vertex-reference-frame":n=!0,l=!p;break;default:n=!1}}if(!n)throw new d("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");if(!l)throw new d("scenelayer:incompatible-normal-reference-frame","Normal reference frame is incompatible with layer spatial reference.")}t(this.normalReferenceFrame,this.spatialReference)}_getTypeKeywords(){const e=[];if(this.profile==="points")e.push("Point");else{if(this.profile!=="mesh-pyramids")throw new d("scenelayer:unknown-profile","SceneLayer:save() encountered an unknown SceneLayer profile: "+this.profile);e.push("3DObject")}return e}_populateFieldUsageInfo(){if(this._fieldUsageInfo={},this.fields)for(const e of this.fields){const t=!!this.attributeStorageInfo?.some(n=>n.name===e.name),r=!!this.associatedLayer?.fields?.some(n=>n&&e.name===n.name),o={supportsLabelingInfo:t,supportsRenderer:t,supportsPopupTemplate:t||r,supportsLayerQuery:r};this._fieldUsageInfo[e.name]=o}}_applyAssociatedLayerOverrides(){this._applyAssociatedLayerFieldsOverrides(),this._applyAssociatedLayerPopupOverrides(),this._applyAssociatedLayerExtentOverride(),this._applyAssociatedLayerPrivileges()}_applyAssociatedLayerFieldsOverrides(){if(!this.associatedLayer?.fields)return;let e=null;for(const t of this.associatedLayer.fields){const r=this.getField(t.name);r?(!r.domain&&t.domain&&(r.domain=t.domain.clone()),r.editable=t.editable,r.nullable=t.nullable,r.length=t.length):(e||(e=this.fields?this.fields.slice():[]),e.push(t.clone()))}e&&this._set("fields",e)}_applyAssociatedLayerPopupOverrides(){if(!this.associatedLayer)return;const e=["popupTemplate","popupEnabled"],t=Q(this);for(let r=0;r<e.length;r++){const o=e[r],n=this.originIdOf(o),l=this.associatedLayer.originIdOf(o);n<l&&(l===A.SERVICE||l===A.PORTAL_ITEM)&&t.setAtOrigin(o,this.associatedLayer[o],l)}}_applyAssociatedLayerExtentOverride(){const e=this.associatedLayer?.getAtOrigin("fullExtent","service");!(H()&&this.associatedLayer?.infoFor3D!=null&&e&&k(this.associatedLayer?.url)&&ee(this))||Q(this).setAtOrigin("fullExtent",e.clone(),A.SERVICE)}_applyAssociatedLayerPrivileges(){const e=this.associatedLayer;e&&(this._set("userHasEditingPrivileges",e.userHasEditingPrivileges),this._set("userHasFullEditingPrivileges",e.userHasFullEditingPrivileges),this._set("userHasUpdateItemPrivileges",e.userHasUpdateItemPrivileges))}async _setAssociatedFeatureLayer(e){if(["mesh-pyramids","points"].includes(this.profile))try{const{serverUrl:t,layerId:r,portalItem:o}=await Ue(`${this.url}/layers/${this.layerId}`,{sceneLayerItem:this.portalItem,customParameters:this.customParameters,apiKey:this.apiKey,signal:e}),n=await rt.FeatureLayer();this.associatedLayer=new n({url:t,customParameters:this.customParameters,layerId:r,portalItem:o}),await this.associatedLayer.load()}catch(t){ge(t)||this._logWarningOnPopupEnabled()}}async _logWarningOnPopupEnabled(){await ve(()=>this.popupEnabled&&this.popupTemplate!=null);const e=`this SceneLayer: ${this.title}`;this.attributeStorageInfo==null?f.getLogger(this).warn(`Associated FeatureLayer could not be loaded and no binary attributes found. Popups will not work on ${e}`):f.getLogger(this).info(`Associated FeatureLayer could not be loaded. Falling back to binary attributes for Popups on ${e}`)}_validateElevationInfo(){const e=this.elevationInfo;this.profile==="mesh-pyramids"&&M(f.getLogger(this),at("Mesh scene layers","relative-to-scene",e)),M(f.getLogger(this),ot("Scene layers",e))}async fetchStatistics(e,t){return await yt({fieldName:e,statisticsInfo:this.statisticsInfo,errorContext:"scenelayer",fieldsIndex:this.fieldsIndex,path:this.parsedUrl?.path??"",customParameters:this.customParameters,apiKey:this.apiKey,signal:t?.signal})}};i([s({types:{key:"type",base:Ke,typeMap:{selection:ze}},json:{origins:{"web-scene":{name:"layerDefinition.featureReduction",write:!0},"portal-item":{name:"layerDefinition.featureReduction",write:!0}}}})],a.prototype,"featureReduction",void 0),i([s({type:[g],json:{read:!1,origins:{"web-scene":{name:"layerDefinition.rangeInfos",write:!0},"portal-item":{name:"layerDefinition.rangeInfos",write:!0}}}})],a.prototype,"rangeInfos",void 0),i([s({json:{read:!1}})],a.prototype,"associatedLayer",void 0),i([s({type:["show","hide"]})],a.prototype,"listMode",void 0),i([s({type:["ArcGISSceneServiceLayer"]})],a.prototype,"operationalLayerType",void 0),i([s({json:{read:!1},readOnly:!0})],a.prototype,"type",void 0),i([s({...W.fields,readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],a.prototype,"fields",void 0),i([s()],a.prototype,"types",null),i([s()],a.prototype,"typeIdField",null),i([s()],a.prototype,"templates",null),i([s()],a.prototype,"formTemplate",null),i([s({readOnly:!0,clonable:!1})],a.prototype,"fieldsIndex",null),i([s({type:tt,json:{read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo"}}})],a.prototype,"floorInfo",void 0),i([s(W.outFields)],a.prototype,"outFields",void 0),i([s({type:Y,readOnly:!0,json:{read:!1}})],a.prototype,"nodePages",void 0),i([v("service","nodePages",["nodePages","pointNodePages"])],a.prototype,"readNodePages",null),i([s({type:[We],readOnly:!0})],a.prototype,"materialDefinitions",void 0),i([s({type:[Ze],readOnly:!0})],a.prototype,"textureSetDefinitions",void 0),i([s({type:[Be],readOnly:!0})],a.prototype,"geometryDefinitions",void 0),i([s({readOnly:!0})],a.prototype,"serviceUpdateTimeStamp",void 0),i([s({readOnly:!0})],a.prototype,"attributeStorageInfo",void 0),i([s({readOnly:!0})],a.prototype,"statisticsInfo",void 0),i([s({type:U.ofType(Number),nonNullable:!0,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.excludeObjectIds",write:{enabled:!0}}})],a.prototype,"excludeObjectIds",void 0),i([s({type:String,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],a.prototype,"definitionExpression",void 0),i([s({type:ct,json:{name:"layerDefinition.polygonFilter",write:{enabled:!0,allowNull:!0},origins:{service:{read:!1,write:!1}}}})],a.prototype,"filter",void 0),i([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),i([s(Ne)],a.prototype,"elevationInfo",null),i([s({readOnly:!0,json:{read:!1}})],a.prototype,"effectiveCapabilities",null),i([s({readOnly:!0})],a.prototype,"effectiveEditingEnabled",null),i([s({type:String})],a.prototype,"geometryType",null),i([s(Ce)],a.prototype,"labelsVisible",void 0),i([s({type:[et],json:{origins:{service:{name:"drawingInfo.labelingInfo",read:{reader:z},write:!1}},name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:z},write:!0}})],a.prototype,"labelingInfo",void 0),i([s(Ge)],a.prototype,"legendEnabled",void 0),i([s({type:Number,json:{origins:{"web-document":{default:1,write:{enabled:!0,target:{opacity:{type:Number},"layerDefinition.drawingInfo.transparency":{type:Number}}},read:{source:["opacity","layerDefinition.drawingInfo.transparency"],reader(e,t){if(typeof e=="number"&&e>=0&&e<=1)return e;const r=t.layerDefinition?.drawingInfo?.transparency;return r!==void 0?we(r):void 0}}},"portal-item":{write:!0},service:{read:!1}}}})],a.prototype,"opacity",void 0),i([s({type:["Low","High"],readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],a.prototype,"priority",void 0),i([s({type:["Labels"],readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],a.prototype,"semantic",void 0),i([s({types:Le,json:{origins:{service:{read:{source:"drawingInfo.renderer"}}},name:"layerDefinition.drawingInfo.renderer",write:!0},value:null})],a.prototype,"renderer",null),i([s({json:{read:!1}})],a.prototype,"cachedDrawingInfo",void 0),i([v("service","cachedDrawingInfo")],a.prototype,"readCachedDrawingInfo",null),i([s({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",null),i([s({type:Boolean,json:{read:!1}})],a.prototype,"editingEnabled",null),i([s({readOnly:!0,json:{write:!1,read:!1}})],a.prototype,"infoFor3D",null),i([s({readOnly:!0,json:{write:!1,read:!1}})],a.prototype,"relationships",null),i([s(Ve)],a.prototype,"popupEnabled",void 0),i([s({type:be,json:{name:"popupInfo",write:!0}})],a.prototype,"popupTemplate",void 0),i([s({readOnly:!0,json:{read:!1}})],a.prototype,"defaultPopupTemplate",null),i([s({type:String,json:{read:!1}})],a.prototype,"objectIdField",void 0),i([v("service","objectIdField",["objectIdField","fields"])],a.prototype,"readObjectIdField",null),i([s({type:String,json:{read:!1}})],a.prototype,"globalIdField",void 0),i([v("service","globalIdField",["globalIdField","fields"])],a.prototype,"readGlobalIdField",null),i([s({readOnly:!0,type:String,json:{read:!1}})],a.prototype,"displayField",null),i([s({type:String,json:{read:!1}})],a.prototype,"profile",void 0),i([v("service","profile",["store.profile"])],a.prototype,"readProfile",null),i([s({readOnly:!0,type:String,json:{origins:{service:{read:{source:"store.normalReferenceFrame"}}},read:!1}})],a.prototype,"normalReferenceFrame",void 0),i([s(ke)],a.prototype,"screenSizePerspectiveEnabled",void 0),i([s({json:{read:!1,origins:{service:{read:!0}}}})],a.prototype,"serviceItemId",void 0),i([s(Re)],a.prototype,"useViewTime",null),a=i([b("esri.layers.SceneLayer")],a);const Z={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},gt={"mesh-pyramids":"mesh",points:"point"},ii=a;export{ii as default};
