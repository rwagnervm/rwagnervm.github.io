import{aa as s,ab as n,ac as u,a4 as m,s as c,q as d,cE as l}from"./index.7eb0daf2.js";import{d as h}from"./FeatureSet.78257171.js";import{n as y,r as _}from"./FeatureLayerView2D.2eb31764.js";import{d as g}from"./FeatureEffect.00e4e7d7.js";import"./Container.461c0161.js";import"./highlightReasons.c3e7cabb.js";import"./definitions.a3a54ed1.js";import"./enums.8929356b.js";import"./Texture.7423fe29.js";import"./featureConversionUtils.c6dfa488.js";import"./OptimizedFeature.32c00f5f.js";import"./OptimizedFeatureSet.6fd3bcb1.js";import"./timeSupport.a600eb47.js";import"./LayerView.649e11dc.js";import"./layerViewUtils.8a0a28d0.js";import"./TechniqueInstance.254dd815.js";import"./UpdateTracking2D.571bdffb.js";import"./BidiEngine.5f10619c.js";import"./GeometryUtils.c6f9b045.js";import"./enums.abef80de.js";import"./utils.dbb84a38.js";import"./Rect.ab45bd96.js";import"./LabelMetric.267a8b18.js";import"./Program.9a92c5ff.js";import"./VertexElementDescriptor.c76e1b24.js";import"./defaults.e5a1167a.js";import"./defaultsJSON.ba72df2f.js";import"./BindType.597c7f67.js";import"./Util.00c6201e.js";import"./vec42.faaf2b1c.js";import"./vec4f64.7b667e97.js";import"./TileContainer.419fd15d.js";import"./WGLContainer.a2728de7.js";import"./ProgramTemplate.7599c672.js";import"./vec3f32.788be850.js";import"./StyleDefinition.e031dcf6.js";import"./config.8224a140.js";import"./earcut.dc9d94eb.js";import"./CircularArray.0c40a6a8.js";import"./tileUtils.91e274f6.js";import"./sizeVariableUtils.34255976.js";import"./OrderByInfo.b53e85dd.js";import"./labelingInfo.41bbc735.js";import"./labelUtils.37b9d8d8.js";import"./jsonUtils.185b82ae.js";import"./heatmapUtils.b763e953.js";import"./SDFHelper.a7a49e03.js";import"./floatRGBA.133c49be.js";import"./FeatureCommandQueue.f16cbaa3.js";import"./constants.344a1358.js";import"./HighlightCounter.5f861618.js";import"./floorFilterUtils.1e9a5f1e.js";import"./popupUtils.c8d8e4fb.js";import"./RefreshableLayerView.6a9401d3.js";const f=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:g})],t.prototype,"filter",void 0),t=s([u("esri.views.layers.StreamLayerView")],t),t};let o=class extends f(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return d(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return l(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return y(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const a=h.fromJSON(p);return a.features.forEach(i=>{i.layer=this.layer,i.sourceLayer=this.layer}),a}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([u("esri.views.2d.layers.StreamLayerView2D")],o);const ve=o;export{ve as default};
