import{bz as E,d7 as h,cz as y,aj as S,bp as l,n as N}from"./index.7eb0daf2.js";import{$ as d}from"./Mesh.9f387926.js";import{N as D,o as M,i as w}from"./MeshTransform.97c24ed3.js";import{s as F}from"./infoFor3D.8ecd2df8.js";import{d as T}from"./FeatureSet.78257171.js";import"./imageUtils.bdf51421.js";import"./MeshVertexAttributes.611e9740.js";import"./MeshLocalVertexSpace.82c9e8da.js";import"./meshVertexSpaceUtils.5f97af5a.js";import"./earcut.dc9d94eb.js";import"./DoubleArray.2bb33e3e.js";import"./Indices.5bfd2621.js";import"./plane.23059d6d.js";import"./vec42.faaf2b1c.js";import"./mat3f64.4564d6a3.js";import"./mat4f64.a89cc140.js";import"./quatf64.bcd5b590.js";import"./vec4f64.7b667e97.js";import"./deduplicate.a7cfab22.js";import"./projection.6ad549e2.js";import"./spatialReferenceEllipsoidUtils.54dfd023.js";import"./computeTranslationToOriginAndRotation.4860e3ef.js";import"./BufferView.80717d85.js";import"./vec3.5fc4e8fc.js";import"./vec4.2d53fcda.js";import"./vertexSpaceConversion.8ec27d21.js";import"./quat.2c7c64ba.js";const I=()=>N.getLogger("esri.rest.support.meshFeatureSet");function it(t,r,e){const o=e.features;e.features=[],delete e.geometryType;const n=T.fromJSON(e);if(n.geometryType="mesh",!e.assetMaps)return n;const s=A(r,e.assetMaps),i=t.sourceSpatialReference??E.WGS84,m=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?b(a.includes("*")?null:new Set(a)):()=>({});for(const u of o){const p=L(u,m,i,r,s);n.features.push(new h({geometry:p,attributes:c(u)}))}return n}function b(t){return({attributes:r})=>{if(!r)return{};if(!t)return r;for(const e in r)t.has(e)||delete r[e];return r}}function L(t,r,e,o,n){const s=t.attributes[r],i=n.get(s);if(i==null||!t.geometry)return null;const m=O(t,e,o),a=y.fromJSON(t.geometry);a.spatialReference=e;const c=x(t.attributes,o),u=e.isGeographic?"local":"georeferenced",p=P(i);return p?d.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u}):d.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}function O({attributes:t},r,{transformFieldRoles:e}){const o=t[e.originX],n=t[e.originY],s=t[e.originZ];return new S({x:o,y:n,z:s,spatialReference:r})}function x(t,{transformFieldRoles:r}){return new D({translation:[t[r.translationX],-t[r.translationZ],t[r.translationY]],rotationAxis:[t[r.rotationX],-t[r.rotationZ],t[r.rotationY]],rotationAngle:t[r.rotationDeg],scale:[t[r.scaleX],t[r.scaleZ],t[r.scaleY]]})}var f;function A(t,r){const e=new Map;for(const o of r){const n=o.parentGlobalId;if(n==null)continue;const s=o.assetName,i=o.assetType,m=o.assetHash,a=o.assetURL,c=o.conversionStatus,u=o.seqNo,p=F(i,t.supportedFormats);if(!p){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const g=l(e,n,()=>({files:new Map}));l(g.files,s,()=>({name:s,type:i,mimeType:p,status:R(c),parts:[]})).parts[u]={hash:m,url:a}}return e}function P(t){const r=Array.from(t.files.values()),e=new Array;for(const o of r){if(o.status!==f.COMPLETED)return null;const n=new Array;for(const s of o.parts){if(!s)return null;n.push(new M(s.url,s.hash))}e.push(new w(o.name,o.mimeType,n))}return e}function R(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{A as assetMapFromAssetMapsJSON,L as extractMesh,it as meshFeatureSetFromJSON};
