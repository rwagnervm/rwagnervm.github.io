import{aT as j,aa as i,ab as r,ej as $,ek as N,ac as S,dW as g,c1 as L,e as u,e6 as b,fG as d,fH as c,s as v}from"./index.7eb0daf2.js";var y;const w=new j({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelDisjoint:"disjoint",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),h=new j({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"});let s=y=class extends g{constructor(e){super(e),this.where=null,this.geometry=null,this.spatialRelationship="intersects",this.distance=void 0,this.objectIds=null,this.units=null,this.timeExtent=null}createQuery(e={}){const{where:t,geometry:l,spatialRelationship:n,timeExtent:a,objectIds:p,units:f,distance:I}=this;return new L({geometry:u(l),objectIds:u(p),spatialRelationship:n,timeExtent:u(a),where:t,units:f,distance:I,...e})}clone(){const{where:e,geometry:t,spatialRelationship:l,timeExtent:n,objectIds:a,units:p,distance:f}=this;return new y({geometry:u(t),objectIds:u(a),spatialRelationship:l,timeExtent:u(n),where:e,units:p,distance:f})}};i([r({type:String,json:{write:!0}})],s.prototype,"where",void 0),i([r({types:$,json:{write:!0}})],s.prototype,"geometry",void 0),i([r({type:w.apiValues,json:{name:"spatialRel",read:{reader:w.read},write:{allowNull:!1,writer:w.write,overridePolicy(){return{enabled:this.geometry!=null}}}}})],s.prototype,"spatialRelationship",void 0),i([r({type:Number,json:{write:{overridePolicy(e){return{enabled:e!=null&&this.geometry!=null}}}}})],s.prototype,"distance",void 0),i([r({type:[Number],json:{write:!0}})],s.prototype,"objectIds",void 0),i([r({type:h.apiValues,json:{read:h.read,write:{writer:h.write,overridePolicy(e){return{enabled:e!=null&&this.geometry!=null}}}}})],s.prototype,"units",void 0),i([r({type:N,json:{write:!0}})],s.prototype,"timeExtent",void 0),s=y=i([S("esri.layers.support.FeatureFilter")],s);const U=s;var m;const R={read:{reader:d},write:{writer:c,overridePolicy(){return{allowNull:this.excludedEffect!=null,isRequired:this.excludedEffect==null}}}},x={read:{reader:d},write:{writer:c,overridePolicy(){return{allowNull:this.includedEffect!=null,isRequired:this.includedEffect==null}}}},E={name:"showExcludedLabels",default:!0};let o=m=class extends g{constructor(e){super(e),this.filter=null,this.includedEffect=null,this.excludedEffect=null,this.excludedLabelsVisible=!1}write(e,t){const l=super.write(e,t);if(t?.origin){if(l.filter){const n=Object.keys(l.filter);if(n.length>1||n[0]!=="where")return t.messages?.push(new v("web-document-write:unsupported-feature-effect","Invalid feature effect 'filter'. A filter can only contain a 'where' property",{layer:t.layer,effect:this})),null}if("showExcludedLabels"in l)return t.messages?.push(new v("web-document-write:unsupported-feature-effect","Invalid value for property 'excludedLabelsVisible' which should always be 'true'",{layer:t.layer,effect:this})),null}return l}clone(){return new m({filter:this.filter!=null?this.filter.clone():null,includedEffect:this.includedEffect,excludedEffect:this.excludedEffect,excludedLabelsVisible:this.excludedLabelsVisible})}};i([r({type:U,json:{write:{allowNull:!0,writer(e,t,l,n){const a=e?.write({},n);a&&Object.keys(a).length!==0?b(l,a,t):b(l,null,t)}}}})],o.prototype,"filter",void 0),i([r({json:{read:d,write:{writer:c,allowNull:!0},origins:{"web-map":R,"portal-item":R}}})],o.prototype,"includedEffect",void 0),i([r({json:{read:d,write:{writer:c,allowNull:!0},origins:{"web-map":x,"portal-item":x}}})],o.prototype,"excludedEffect",void 0),i([r({type:Boolean,json:{write:!0,name:"showExcludedLabels",origins:{"web-map":E,"portal-item":E}}})],o.prototype,"excludedLabelsVisible",void 0),o=m=i([S("esri.layers.support.FeatureEffect")],o);const _=o;export{U as d,_ as w};
