import{F as p,s,e as i}from"./index.7eb0daf2.js";import{l as n}from"./MeshVertexAttributes.611e9740.js";import{M as c}from"./vertexSpaceConversion.8ec27d21.js";import"./mat3f64.4564d6a3.js";import"./mat4f64.a89cc140.js";import"./spatialReferenceEllipsoidUtils.54dfd023.js";import"./computeTranslationToOriginAndRotation.4860e3ef.js";import"./meshVertexSpaceUtils.5f97af5a.js";import"./MeshLocalVertexSpace.82c9e8da.js";import"./vec3.5fc4e8fc.js";import"./projection.6ad549e2.js";import"./DoubleArray.2bb33e3e.js";import"./BufferView.80717d85.js";import"./vec42.faaf2b1c.js";import"./vec4.2d53fcda.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
