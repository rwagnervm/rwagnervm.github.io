import{a4 as l,a5 as h,c7 as g,ef as f,aa as w,ac as d}from"./index.7eb0daf2.js";import{t as u,p as n}from"./jsonUtils.93554317.js";import{d as V}from"./FeatureSet.78257171.js";import{f as b,y as S}from"./LayerView.649e11dc.js";import{t as _}from"./GraphicContainer.abe27126.js";import{V as T}from"./GraphicsView2D.73f18369.js";import"./UniqueValueRenderer.8069ab57.js";import"./ColorStop.aa8650af.js";import"./diffUtils.080c04bc.js";import"./colorRamps.272b71a1.js";import"./sizeVariableUtils.34255976.js";import"./visualVariableUtils.12ee1cdb.js";import"./jsonUtils.185b82ae.js";import"./defaults.e5a1167a.js";import"./defaultsJSON.ba72df2f.js";import"./styleUtils.7f2b22b0.js";import"./LRUCache.6f8863ed.js";import"./Version.856e86b2.js";import"./FieldsIndex.333d0734.js";import"./UnknownTimeZone.4756be49.js";import"./OverrideHelper.b5d99b26.js";import"./colorUtils.085072a2.js";import"./vec42.faaf2b1c.js";import"./vec4f64.7b667e97.js";import"./utils.dbb84a38.js";import"./quantizationUtils.fe6b1e6e.js";import"./heatmapUtils.b763e953.js";import"./Container.461c0161.js";import"./highlightReasons.c3e7cabb.js";import"./definitions.a3a54ed1.js";import"./enums.8929356b.js";import"./Texture.7423fe29.js";import"./layerViewUtils.8a0a28d0.js";import"./AGraphicContainer.c019acec.js";import"./TechniqueInstance.254dd815.js";import"./UpdateTracking2D.571bdffb.js";import"./BidiEngine.5f10619c.js";import"./OptimizedFeature.32c00f5f.js";import"./GeometryUtils.c6f9b045.js";import"./enums.abef80de.js";import"./Rect.ab45bd96.js";import"./LabelMetric.267a8b18.js";import"./Program.9a92c5ff.js";import"./VertexElementDescriptor.c76e1b24.js";import"./BindType.597c7f67.js";import"./Util.00c6201e.js";import"./TileContainer.419fd15d.js";import"./WGLContainer.a2728de7.js";import"./ProgramTemplate.7599c672.js";import"./vec3f32.788be850.js";import"./StyleDefinition.e031dcf6.js";import"./config.8224a140.js";import"./earcut.dc9d94eb.js";import"./featureConversionUtils.c6dfa488.js";import"./OptimizedFeatureSet.6fd3bcb1.js";import"./FeatureCommandQueue.f16cbaa3.js";import"./constants.344a1358.js";import"./AttributeStore.38266bd6.js";import"./labelUtils.37b9d8d8.js";import"./TimeOnly.5d28261e.js";import"./timeSupport.393bd0ba.js";import"./json.20588c22.js";import"./normalizeUtilsSync.71a1cb90.js";let y=class extends b(S){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(t,e){if(!this.graphicsViews.length)return null;const o=this.layer;return this.graphicsViews.reverse().flatMap(r=>{const i=this._popupTemplates.get(r),s=r.hitTest(t);for(const p of s)p.layer=o,p.sourceLayer=o,p.popupTemplate=i;return s}).map(r=>({type:"graphic",graphic:r,layer:o,mapPoint:t}))}update(t){if(this.graphicsViews)for(const e of this.graphicsViews)e.processUpdate(t)}attach(){this.addAttachHandles([l(()=>this.layer?.featureCollections,t=>{this._clear();for(const{popupInfo:e,featureSet:o,layerDefinition:r}of t){const i=V.fromJSON(o),s=new g(i.features),p=r.drawingInfo,c=e?f.fromJSON(e):null,m=u(p.renderer),a=new T({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:s,renderer:m,container:new _(this.view.featuresTilingScheme)});this._graphicsViewMap[i.geometryType]=a,this._popupTemplates.set(a,c),i.geometryType!=="polygon"||this.layer.polygonSymbol?i.geometryType!=="polyline"||this.layer.lineSymbol?i.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=m.symbol):this.layer.lineSymbol=m.symbol:this.layer.polygonSymbol=m.symbol,this.graphicsViews.push(a),this.container.addChild(a.container)}},h),l(()=>this.layer?.polygonSymbol,t=>{this._graphicsViewMap.polygon.renderer=new n({symbol:t})},h),l(()=>this.layer?.lineSymbol,t=>{this._graphicsViewMap.polyline.renderer=new n({symbol:t})},h),l(()=>this.layer?.pointSymbol,t=>{this._graphicsViewMap.point.renderer=new n({symbol:t})},h)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const t of this.graphicsViews)t.viewChange()}_clear(){this.container.removeAllChildren();for(const t of this.graphicsViews)t.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};y=w([d("esri.views.2d.layers.GeoRSSLayerView2D")],y);const Dt=y;export{Dt as default};
